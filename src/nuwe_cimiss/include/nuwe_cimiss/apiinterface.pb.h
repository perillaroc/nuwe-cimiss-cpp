// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apiinterface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_apiinterface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_apiinterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_apiinterface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_apiinterface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apiinterface_2eproto;
namespace cma {
namespace music {
namespace pb {
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class RequestInfo;
class RequestInfoDefaultTypeInternal;
extern RequestInfoDefaultTypeInternal _RequestInfo_default_instance_;
class RetArray2D;
class RetArray2DDefaultTypeInternal;
extern RetArray2DDefaultTypeInternal _RetArray2D_default_instance_;
class RetDataBlock;
class RetDataBlockDefaultTypeInternal;
extern RetDataBlockDefaultTypeInternal _RetDataBlock_default_instance_;
class RetFilesInfo;
class RetFilesInfoDefaultTypeInternal;
extern RetFilesInfoDefaultTypeInternal _RetFilesInfo_default_instance_;
class RetGridArray2D;
class RetGridArray2DDefaultTypeInternal;
extern RetGridArray2DDefaultTypeInternal _RetGridArray2D_default_instance_;
class RetGridScalar2D;
class RetGridScalar2DDefaultTypeInternal;
extern RetGridScalar2DDefaultTypeInternal _RetGridScalar2D_default_instance_;
class RetGridVector2D;
class RetGridVector2DDefaultTypeInternal;
extern RetGridVector2DDefaultTypeInternal _RetGridVector2D_default_instance_;
class StoreArray2D;
class StoreArray2DDefaultTypeInternal;
extern StoreArray2DDefaultTypeInternal _StoreArray2D_default_instance_;
class StoreBlockData;
class StoreBlockDataDefaultTypeInternal;
extern StoreBlockDataDefaultTypeInternal _StoreBlockData_default_instance_;
class StoreGridData;
class StoreGridDataDefaultTypeInternal;
extern StoreGridDataDefaultTypeInternal _StoreGridData_default_instance_;
}  // namespace pb
}  // namespace music
}  // namespace cma
PROTOBUF_NAMESPACE_OPEN
template<> ::cma::music::pb::FileInfo* Arena::CreateMaybeMessage<::cma::music::pb::FileInfo>(Arena*);
template<> ::cma::music::pb::RequestInfo* Arena::CreateMaybeMessage<::cma::music::pb::RequestInfo>(Arena*);
template<> ::cma::music::pb::RetArray2D* Arena::CreateMaybeMessage<::cma::music::pb::RetArray2D>(Arena*);
template<> ::cma::music::pb::RetDataBlock* Arena::CreateMaybeMessage<::cma::music::pb::RetDataBlock>(Arena*);
template<> ::cma::music::pb::RetFilesInfo* Arena::CreateMaybeMessage<::cma::music::pb::RetFilesInfo>(Arena*);
template<> ::cma::music::pb::RetGridArray2D* Arena::CreateMaybeMessage<::cma::music::pb::RetGridArray2D>(Arena*);
template<> ::cma::music::pb::RetGridScalar2D* Arena::CreateMaybeMessage<::cma::music::pb::RetGridScalar2D>(Arena*);
template<> ::cma::music::pb::RetGridVector2D* Arena::CreateMaybeMessage<::cma::music::pb::RetGridVector2D>(Arena*);
template<> ::cma::music::pb::StoreArray2D* Arena::CreateMaybeMessage<::cma::music::pb::StoreArray2D>(Arena*);
template<> ::cma::music::pb::StoreBlockData* Arena::CreateMaybeMessage<::cma::music::pb::StoreBlockData>(Arena*);
template<> ::cma::music::pb::StoreGridData* Arena::CreateMaybeMessage<::cma::music::pb::StoreGridData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cma {
namespace music {
namespace pb {

// ===================================================================

class RequestInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cma.music.pb.RequestInfo) */ {
 public:
  RequestInfo();
  virtual ~RequestInfo();

  RequestInfo(const RequestInfo& from);
  RequestInfo(RequestInfo&& from) noexcept
    : RequestInfo() {
    *this = ::std::move(from);
  }

  inline RequestInfo& operator=(const RequestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestInfo& operator=(RequestInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestInfo* internal_default_instance() {
    return reinterpret_cast<const RequestInfo*>(
               &_RequestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestInfo& a, RequestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestInfo* New() const final {
    return CreateMaybeMessage<RequestInfo>(nullptr);
  }

  RequestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestInfo& from);
  void MergeFrom(const RequestInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cma.music.pb.RequestInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiinterface_2eproto);
    return ::descriptor_table_apiinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 2,
    kRequestElemsFieldNumber = 3,
    kRequestParamsFieldNumber = 4,
    kRequestTimeFieldNumber = 5,
    kResponseTimeFieldNumber = 6,
    kErrorCodeFieldNumber = 1,
    kRowCountFieldNumber = 7,
    kTakeTimeFieldNumber = 8,
    kColCountFieldNumber = 9,
  };
  // string errorMessage = 2;
  void clear_errormessage();
  const std::string& errormessage() const;
  void set_errormessage(const std::string& value);
  void set_errormessage(std::string&& value);
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  std::string* mutable_errormessage();
  std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);

  // string requestElems = 3;
  void clear_requestelems();
  const std::string& requestelems() const;
  void set_requestelems(const std::string& value);
  void set_requestelems(std::string&& value);
  void set_requestelems(const char* value);
  void set_requestelems(const char* value, size_t size);
  std::string* mutable_requestelems();
  std::string* release_requestelems();
  void set_allocated_requestelems(std::string* requestelems);

  // string requestParams = 4;
  void clear_requestparams();
  const std::string& requestparams() const;
  void set_requestparams(const std::string& value);
  void set_requestparams(std::string&& value);
  void set_requestparams(const char* value);
  void set_requestparams(const char* value, size_t size);
  std::string* mutable_requestparams();
  std::string* release_requestparams();
  void set_allocated_requestparams(std::string* requestparams);

  // string requestTime = 5;
  void clear_requesttime();
  const std::string& requesttime() const;
  void set_requesttime(const std::string& value);
  void set_requesttime(std::string&& value);
  void set_requesttime(const char* value);
  void set_requesttime(const char* value, size_t size);
  std::string* mutable_requesttime();
  std::string* release_requesttime();
  void set_allocated_requesttime(std::string* requesttime);

  // string responseTime = 6;
  void clear_responsetime();
  const std::string& responsetime() const;
  void set_responsetime(const std::string& value);
  void set_responsetime(std::string&& value);
  void set_responsetime(const char* value);
  void set_responsetime(const char* value, size_t size);
  std::string* mutable_responsetime();
  std::string* release_responsetime();
  void set_allocated_responsetime(std::string* responsetime);

  // int32 errorCode = 1;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 rowCount = 7;
  void clear_rowcount();
  ::PROTOBUF_NAMESPACE_ID::int32 rowcount() const;
  void set_rowcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 takeTime = 8;
  void clear_taketime();
  ::PROTOBUF_NAMESPACE_ID::int32 taketime() const;
  void set_taketime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 colCount = 9;
  void clear_colcount();
  ::PROTOBUF_NAMESPACE_ID::int32 colcount() const;
  void set_colcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:cma.music.pb.RequestInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestelems_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestparams_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responsetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 rowcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 taketime_;
  ::PROTOBUF_NAMESPACE_ID::int32 colcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiinterface_2eproto;
};
// -------------------------------------------------------------------

class RetArray2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cma.music.pb.RetArray2D) */ {
 public:
  RetArray2D();
  virtual ~RetArray2D();

  RetArray2D(const RetArray2D& from);
  RetArray2D(RetArray2D&& from) noexcept
    : RetArray2D() {
    *this = ::std::move(from);
  }

  inline RetArray2D& operator=(const RetArray2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetArray2D& operator=(RetArray2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetArray2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetArray2D* internal_default_instance() {
    return reinterpret_cast<const RetArray2D*>(
               &_RetArray2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RetArray2D& a, RetArray2D& b) {
    a.Swap(&b);
  }
  inline void Swap(RetArray2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetArray2D* New() const final {
    return CreateMaybeMessage<RetArray2D>(nullptr);
  }

  RetArray2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetArray2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetArray2D& from);
  void MergeFrom(const RetArray2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetArray2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cma.music.pb.RetArray2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiinterface_2eproto);
    return ::descriptor_table_apiinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kElementNamesFieldNumber = 3,
    kRequestFieldNumber = 2,
  };
  // repeated string data = 1;
  int data_size() const;
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();

  // repeated string elementNames = 3;
  int elementnames_size() const;
  void clear_elementnames();
  const std::string& elementnames(int index) const;
  std::string* mutable_elementnames(int index);
  void set_elementnames(int index, const std::string& value);
  void set_elementnames(int index, std::string&& value);
  void set_elementnames(int index, const char* value);
  void set_elementnames(int index, const char* value, size_t size);
  std::string* add_elementnames();
  void add_elementnames(const std::string& value);
  void add_elementnames(std::string&& value);
  void add_elementnames(const char* value);
  void add_elementnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& elementnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_elementnames();

  // .cma.music.pb.RequestInfo request = 2;
  bool has_request() const;
  void clear_request();
  const ::cma::music::pb::RequestInfo& request() const;
  ::cma::music::pb::RequestInfo* release_request();
  ::cma::music::pb::RequestInfo* mutable_request();
  void set_allocated_request(::cma::music::pb::RequestInfo* request);

  // @@protoc_insertion_point(class_scope:cma.music.pb.RetArray2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> elementnames_;
  ::cma::music::pb::RequestInfo* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiinterface_2eproto;
};
// -------------------------------------------------------------------

class RetGridArray2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cma.music.pb.RetGridArray2D) */ {
 public:
  RetGridArray2D();
  virtual ~RetGridArray2D();

  RetGridArray2D(const RetGridArray2D& from);
  RetGridArray2D(RetGridArray2D&& from) noexcept
    : RetGridArray2D() {
    *this = ::std::move(from);
  }

  inline RetGridArray2D& operator=(const RetGridArray2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetGridArray2D& operator=(RetGridArray2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetGridArray2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetGridArray2D* internal_default_instance() {
    return reinterpret_cast<const RetGridArray2D*>(
               &_RetGridArray2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RetGridArray2D& a, RetGridArray2D& b) {
    a.Swap(&b);
  }
  inline void Swap(RetGridArray2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetGridArray2D* New() const final {
    return CreateMaybeMessage<RetGridArray2D>(nullptr);
  }

  RetGridArray2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetGridArray2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetGridArray2D& from);
  void MergeFrom(const RetGridArray2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetGridArray2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cma.music.pb.RetGridArray2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiinterface_2eproto);
    return ::descriptor_table_apiinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kLatsFieldNumber = 11,
    kLonsFieldNumber = 12,
    kUnitsFieldNumber = 13,
    kUserEleNameFieldNumber = 14,
    kRequestFieldNumber = 2,
    kStartLatFieldNumber = 3,
    kStartLonFieldNumber = 4,
    kEndLatFieldNumber = 5,
    kEndLonFieldNumber = 6,
    kLatCountFieldNumber = 7,
    kLonCountFieldNumber = 8,
    kLonStepFieldNumber = 9,
    kLatStepFieldNumber = 10,
  };
  // repeated float data = 1;
  int data_size() const;
  void clear_data();
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // repeated float lats = 11;
  int lats_size() const;
  void clear_lats();
  float lats(int index) const;
  void set_lats(int index, float value);
  void add_lats(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lats();

  // repeated float lons = 12;
  int lons_size() const;
  void clear_lons();
  float lons(int index) const;
  void set_lons(int index, float value);
  void add_lons(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lons();

  // string units = 13;
  void clear_units();
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);

  // string userEleName = 14;
  void clear_userelename();
  const std::string& userelename() const;
  void set_userelename(const std::string& value);
  void set_userelename(std::string&& value);
  void set_userelename(const char* value);
  void set_userelename(const char* value, size_t size);
  std::string* mutable_userelename();
  std::string* release_userelename();
  void set_allocated_userelename(std::string* userelename);

  // .cma.music.pb.RequestInfo request = 2;
  bool has_request() const;
  void clear_request();
  const ::cma::music::pb::RequestInfo& request() const;
  ::cma::music::pb::RequestInfo* release_request();
  ::cma::music::pb::RequestInfo* mutable_request();
  void set_allocated_request(::cma::music::pb::RequestInfo* request);

  // float startLat = 3;
  void clear_startlat();
  float startlat() const;
  void set_startlat(float value);

  // float startLon = 4;
  void clear_startlon();
  float startlon() const;
  void set_startlon(float value);

  // float endLat = 5;
  void clear_endlat();
  float endlat() const;
  void set_endlat(float value);

  // float endLon = 6;
  void clear_endlon();
  float endlon() const;
  void set_endlon(float value);

  // int32 latCount = 7;
  void clear_latcount();
  ::PROTOBUF_NAMESPACE_ID::int32 latcount() const;
  void set_latcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 lonCount = 8;
  void clear_loncount();
  ::PROTOBUF_NAMESPACE_ID::int32 loncount() const;
  void set_loncount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float lonStep = 9;
  void clear_lonstep();
  float lonstep() const;
  void set_lonstep(float value);

  // float latStep = 10;
  void clear_latstep();
  float latstep() const;
  void set_latstep(float value);

  // @@protoc_insertion_point(class_scope:cma.music.pb.RetGridArray2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lats_;
  mutable std::atomic<int> _lats_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lons_;
  mutable std::atomic<int> _lons_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userelename_;
  ::cma::music::pb::RequestInfo* request_;
  float startlat_;
  float startlon_;
  float endlat_;
  float endlon_;
  ::PROTOBUF_NAMESPACE_ID::int32 latcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 loncount_;
  float lonstep_;
  float latstep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiinterface_2eproto;
};
// -------------------------------------------------------------------

class FileInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cma.music.pb.FileInfo) */ {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cma.music.pb.FileInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiinterface_2eproto);
    return ::descriptor_table_apiinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 7,
    kFileNameFieldNumber = 1,
    kSavePathFieldNumber = 2,
    kSuffixFieldNumber = 3,
    kSizeFieldNumber = 4,
    kFileUrlFieldNumber = 5,
    kImgBase64FieldNumber = 6,
  };
  // repeated string attributes = 7;
  int attributes_size() const;
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();

  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);

  // string savePath = 2;
  void clear_savepath();
  const std::string& savepath() const;
  void set_savepath(const std::string& value);
  void set_savepath(std::string&& value);
  void set_savepath(const char* value);
  void set_savepath(const char* value, size_t size);
  std::string* mutable_savepath();
  std::string* release_savepath();
  void set_allocated_savepath(std::string* savepath);

  // string suffix = 3;
  void clear_suffix();
  const std::string& suffix() const;
  void set_suffix(const std::string& value);
  void set_suffix(std::string&& value);
  void set_suffix(const char* value);
  void set_suffix(const char* value, size_t size);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);

  // string size = 4;
  void clear_size();
  const std::string& size() const;
  void set_size(const std::string& value);
  void set_size(std::string&& value);
  void set_size(const char* value);
  void set_size(const char* value, size_t size);
  std::string* mutable_size();
  std::string* release_size();
  void set_allocated_size(std::string* size);

  // string fileUrl = 5;
  void clear_fileurl();
  const std::string& fileurl() const;
  void set_fileurl(const std::string& value);
  void set_fileurl(std::string&& value);
  void set_fileurl(const char* value);
  void set_fileurl(const char* value, size_t size);
  std::string* mutable_fileurl();
  std::string* release_fileurl();
  void set_allocated_fileurl(std::string* fileurl);

  // string imgBase64 = 6;
  void clear_imgbase64();
  const std::string& imgbase64() const;
  void set_imgbase64(const std::string& value);
  void set_imgbase64(std::string&& value);
  void set_imgbase64(const char* value);
  void set_imgbase64(const char* value, size_t size);
  std::string* mutable_imgbase64();
  std::string* release_imgbase64();
  void set_allocated_imgbase64(std::string* imgbase64);

  // @@protoc_insertion_point(class_scope:cma.music.pb.FileInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr savepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fileurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgbase64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiinterface_2eproto;
};
// -------------------------------------------------------------------

class RetFilesInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cma.music.pb.RetFilesInfo) */ {
 public:
  RetFilesInfo();
  virtual ~RetFilesInfo();

  RetFilesInfo(const RetFilesInfo& from);
  RetFilesInfo(RetFilesInfo&& from) noexcept
    : RetFilesInfo() {
    *this = ::std::move(from);
  }

  inline RetFilesInfo& operator=(const RetFilesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetFilesInfo& operator=(RetFilesInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetFilesInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetFilesInfo* internal_default_instance() {
    return reinterpret_cast<const RetFilesInfo*>(
               &_RetFilesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RetFilesInfo& a, RetFilesInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RetFilesInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetFilesInfo* New() const final {
    return CreateMaybeMessage<RetFilesInfo>(nullptr);
  }

  RetFilesInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetFilesInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetFilesInfo& from);
  void MergeFrom(const RetFilesInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetFilesInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cma.music.pb.RetFilesInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiinterface_2eproto);
    return ::descriptor_table_apiinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileInfosFieldNumber = 1,
    kRequestFieldNumber = 2,
  };
  // repeated .cma.music.pb.FileInfo fileInfos = 1;
  int fileinfos_size() const;
  void clear_fileinfos();
  ::cma::music::pb::FileInfo* mutable_fileinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cma::music::pb::FileInfo >*
      mutable_fileinfos();
  const ::cma::music::pb::FileInfo& fileinfos(int index) const;
  ::cma::music::pb::FileInfo* add_fileinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cma::music::pb::FileInfo >&
      fileinfos() const;

  // .cma.music.pb.RequestInfo request = 2;
  bool has_request() const;
  void clear_request();
  const ::cma::music::pb::RequestInfo& request() const;
  ::cma::music::pb::RequestInfo* release_request();
  ::cma::music::pb::RequestInfo* mutable_request();
  void set_allocated_request(::cma::music::pb::RequestInfo* request);

  // @@protoc_insertion_point(class_scope:cma.music.pb.RetFilesInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cma::music::pb::FileInfo > fileinfos_;
  ::cma::music::pb::RequestInfo* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiinterface_2eproto;
};
// -------------------------------------------------------------------

class StoreArray2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cma.music.pb.StoreArray2D) */ {
 public:
  StoreArray2D();
  virtual ~StoreArray2D();

  StoreArray2D(const StoreArray2D& from);
  StoreArray2D(StoreArray2D&& from) noexcept
    : StoreArray2D() {
    *this = ::std::move(from);
  }

  inline StoreArray2D& operator=(const StoreArray2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreArray2D& operator=(StoreArray2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreArray2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreArray2D* internal_default_instance() {
    return reinterpret_cast<const StoreArray2D*>(
               &_StoreArray2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StoreArray2D& a, StoreArray2D& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreArray2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreArray2D* New() const final {
    return CreateMaybeMessage<StoreArray2D>(nullptr);
  }

  StoreArray2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreArray2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreArray2D& from);
  void MergeFrom(const StoreArray2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreArray2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cma.music.pb.StoreArray2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiinterface_2eproto);
    return ::descriptor_table_apiinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kFilenamesFieldNumber = 5,
    kClientMountPathFieldNumber = 7,
    kServerMountPathFieldNumber = 8,
    kRowFieldNumber = 2,
    kColFieldNumber = 3,
    kFileflagFieldNumber = 4,
    kIsBackstageFieldNumber = 6,
  };
  // repeated string data = 1;
  int data_size() const;
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();

  // repeated string filenames = 5;
  int filenames_size() const;
  void clear_filenames();
  const std::string& filenames(int index) const;
  std::string* mutable_filenames(int index);
  void set_filenames(int index, const std::string& value);
  void set_filenames(int index, std::string&& value);
  void set_filenames(int index, const char* value);
  void set_filenames(int index, const char* value, size_t size);
  std::string* add_filenames();
  void add_filenames(const std::string& value);
  void add_filenames(std::string&& value);
  void add_filenames(const char* value);
  void add_filenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filenames();

  // string client_mount_path = 7;
  void clear_client_mount_path();
  const std::string& client_mount_path() const;
  void set_client_mount_path(const std::string& value);
  void set_client_mount_path(std::string&& value);
  void set_client_mount_path(const char* value);
  void set_client_mount_path(const char* value, size_t size);
  std::string* mutable_client_mount_path();
  std::string* release_client_mount_path();
  void set_allocated_client_mount_path(std::string* client_mount_path);

  // string server_mount_path = 8;
  void clear_server_mount_path();
  const std::string& server_mount_path() const;
  void set_server_mount_path(const std::string& value);
  void set_server_mount_path(std::string&& value);
  void set_server_mount_path(const char* value);
  void set_server_mount_path(const char* value, size_t size);
  std::string* mutable_server_mount_path();
  std::string* release_server_mount_path();
  void set_allocated_server_mount_path(std::string* server_mount_path);

  // int32 row = 2;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 col = 3;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 fileflag = 4;
  void clear_fileflag();
  ::PROTOBUF_NAMESPACE_ID::int32 fileflag() const;
  void set_fileflag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 is_backstage = 6;
  void clear_is_backstage();
  ::PROTOBUF_NAMESPACE_ID::int32 is_backstage() const;
  void set_is_backstage(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:cma.music.pb.StoreArray2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filenames_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_mount_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_mount_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  ::PROTOBUF_NAMESPACE_ID::int32 fileflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_backstage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiinterface_2eproto;
};
// -------------------------------------------------------------------

class RetDataBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cma.music.pb.RetDataBlock) */ {
 public:
  RetDataBlock();
  virtual ~RetDataBlock();

  RetDataBlock(const RetDataBlock& from);
  RetDataBlock(RetDataBlock&& from) noexcept
    : RetDataBlock() {
    *this = ::std::move(from);
  }

  inline RetDataBlock& operator=(const RetDataBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetDataBlock& operator=(RetDataBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetDataBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetDataBlock* internal_default_instance() {
    return reinterpret_cast<const RetDataBlock*>(
               &_RetDataBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RetDataBlock& a, RetDataBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(RetDataBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetDataBlock* New() const final {
    return CreateMaybeMessage<RetDataBlock>(nullptr);
  }

  RetDataBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetDataBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetDataBlock& from);
  void MergeFrom(const RetDataBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetDataBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cma.music.pb.RetDataBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiinterface_2eproto);
    return ::descriptor_table_apiinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataNameFieldNumber = 1,
    kByteArrayFieldNumber = 2,
    kRequestFieldNumber = 3,
  };
  // string dataName = 1;
  void clear_dataname();
  const std::string& dataname() const;
  void set_dataname(const std::string& value);
  void set_dataname(std::string&& value);
  void set_dataname(const char* value);
  void set_dataname(const char* value, size_t size);
  std::string* mutable_dataname();
  std::string* release_dataname();
  void set_allocated_dataname(std::string* dataname);

  // bytes byteArray = 2;
  void clear_bytearray();
  const std::string& bytearray() const;
  void set_bytearray(const std::string& value);
  void set_bytearray(std::string&& value);
  void set_bytearray(const char* value);
  void set_bytearray(const void* value, size_t size);
  std::string* mutable_bytearray();
  std::string* release_bytearray();
  void set_allocated_bytearray(std::string* bytearray);

  // .cma.music.pb.RequestInfo request = 3;
  bool has_request() const;
  void clear_request();
  const ::cma::music::pb::RequestInfo& request() const;
  ::cma::music::pb::RequestInfo* release_request();
  ::cma::music::pb::RequestInfo* mutable_request();
  void set_allocated_request(::cma::music::pb::RequestInfo* request);

  // @@protoc_insertion_point(class_scope:cma.music.pb.RetDataBlock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytearray_;
  ::cma::music::pb::RequestInfo* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiinterface_2eproto;
};
// -------------------------------------------------------------------

class RetGridVector2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cma.music.pb.RetGridVector2D) */ {
 public:
  RetGridVector2D();
  virtual ~RetGridVector2D();

  RetGridVector2D(const RetGridVector2D& from);
  RetGridVector2D(RetGridVector2D&& from) noexcept
    : RetGridVector2D() {
    *this = ::std::move(from);
  }

  inline RetGridVector2D& operator=(const RetGridVector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetGridVector2D& operator=(RetGridVector2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetGridVector2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetGridVector2D* internal_default_instance() {
    return reinterpret_cast<const RetGridVector2D*>(
               &_RetGridVector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RetGridVector2D& a, RetGridVector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(RetGridVector2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetGridVector2D* New() const final {
    return CreateMaybeMessage<RetGridVector2D>(nullptr);
  }

  RetGridVector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetGridVector2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetGridVector2D& from);
  void MergeFrom(const RetGridVector2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetGridVector2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cma.music.pb.RetGridVector2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiinterface_2eproto);
    return ::descriptor_table_apiinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUDatasFieldNumber = 1,
    kVData2FieldNumber = 2,
    kLatsFieldNumber = 12,
    kLonsFieldNumber = 13,
    kUEleNameFieldNumber = 14,
    kVEleNameFieldNumber = 15,
    kRequestFieldNumber = 3,
    kStartLatFieldNumber = 4,
    kStartLonFieldNumber = 5,
    kEndLatFieldNumber = 6,
    kEndLonFieldNumber = 7,
    kLatCountFieldNumber = 8,
    kLonCountFieldNumber = 9,
    kLonStepFieldNumber = 10,
    kLatStepFieldNumber = 11,
  };
  // repeated float u_datas = 1;
  int u_datas_size() const;
  void clear_u_datas();
  float u_datas(int index) const;
  void set_u_datas(int index, float value);
  void add_u_datas(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      u_datas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_u_datas();

  // repeated float v_data2 = 2;
  int v_data2_size() const;
  void clear_v_data2();
  float v_data2(int index) const;
  void set_v_data2(int index, float value);
  void add_v_data2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      v_data2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_v_data2();

  // repeated float lats = 12;
  int lats_size() const;
  void clear_lats();
  float lats(int index) const;
  void set_lats(int index, float value);
  void add_lats(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lats();

  // repeated float lons = 13;
  int lons_size() const;
  void clear_lons();
  float lons(int index) const;
  void set_lons(int index, float value);
  void add_lons(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lons();

  // string u_EleName = 14;
  void clear_u_elename();
  const std::string& u_elename() const;
  void set_u_elename(const std::string& value);
  void set_u_elename(std::string&& value);
  void set_u_elename(const char* value);
  void set_u_elename(const char* value, size_t size);
  std::string* mutable_u_elename();
  std::string* release_u_elename();
  void set_allocated_u_elename(std::string* u_elename);

  // string v_EleName = 15;
  void clear_v_elename();
  const std::string& v_elename() const;
  void set_v_elename(const std::string& value);
  void set_v_elename(std::string&& value);
  void set_v_elename(const char* value);
  void set_v_elename(const char* value, size_t size);
  std::string* mutable_v_elename();
  std::string* release_v_elename();
  void set_allocated_v_elename(std::string* v_elename);

  // .cma.music.pb.RequestInfo request = 3;
  bool has_request() const;
  void clear_request();
  const ::cma::music::pb::RequestInfo& request() const;
  ::cma::music::pb::RequestInfo* release_request();
  ::cma::music::pb::RequestInfo* mutable_request();
  void set_allocated_request(::cma::music::pb::RequestInfo* request);

  // float startLat = 4;
  void clear_startlat();
  float startlat() const;
  void set_startlat(float value);

  // float startLon = 5;
  void clear_startlon();
  float startlon() const;
  void set_startlon(float value);

  // float endLat = 6;
  void clear_endlat();
  float endlat() const;
  void set_endlat(float value);

  // float endLon = 7;
  void clear_endlon();
  float endlon() const;
  void set_endlon(float value);

  // int32 latCount = 8;
  void clear_latcount();
  ::PROTOBUF_NAMESPACE_ID::int32 latcount() const;
  void set_latcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 lonCount = 9;
  void clear_loncount();
  ::PROTOBUF_NAMESPACE_ID::int32 loncount() const;
  void set_loncount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float lonStep = 10;
  void clear_lonstep();
  float lonstep() const;
  void set_lonstep(float value);

  // float latStep = 11;
  void clear_latstep();
  float latstep() const;
  void set_latstep(float value);

  // @@protoc_insertion_point(class_scope:cma.music.pb.RetGridVector2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > u_datas_;
  mutable std::atomic<int> _u_datas_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > v_data2_;
  mutable std::atomic<int> _v_data2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lats_;
  mutable std::atomic<int> _lats_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lons_;
  mutable std::atomic<int> _lons_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr u_elename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_elename_;
  ::cma::music::pb::RequestInfo* request_;
  float startlat_;
  float startlon_;
  float endlat_;
  float endlon_;
  ::PROTOBUF_NAMESPACE_ID::int32 latcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 loncount_;
  float lonstep_;
  float latstep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiinterface_2eproto;
};
// -------------------------------------------------------------------

class RetGridScalar2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cma.music.pb.RetGridScalar2D) */ {
 public:
  RetGridScalar2D();
  virtual ~RetGridScalar2D();

  RetGridScalar2D(const RetGridScalar2D& from);
  RetGridScalar2D(RetGridScalar2D&& from) noexcept
    : RetGridScalar2D() {
    *this = ::std::move(from);
  }

  inline RetGridScalar2D& operator=(const RetGridScalar2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetGridScalar2D& operator=(RetGridScalar2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetGridScalar2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetGridScalar2D* internal_default_instance() {
    return reinterpret_cast<const RetGridScalar2D*>(
               &_RetGridScalar2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RetGridScalar2D& a, RetGridScalar2D& b) {
    a.Swap(&b);
  }
  inline void Swap(RetGridScalar2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetGridScalar2D* New() const final {
    return CreateMaybeMessage<RetGridScalar2D>(nullptr);
  }

  RetGridScalar2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetGridScalar2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetGridScalar2D& from);
  void MergeFrom(const RetGridScalar2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetGridScalar2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cma.music.pb.RetGridScalar2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiinterface_2eproto);
    return ::descriptor_table_apiinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
    kLatsFieldNumber = 11,
    kLonsFieldNumber = 12,
    kUnitsFieldNumber = 13,
    kUserEleNameFieldNumber = 14,
    kRequestFieldNumber = 2,
    kStartLatFieldNumber = 3,
    kStartLonFieldNumber = 4,
    kEndLatFieldNumber = 5,
    kEndLonFieldNumber = 6,
    kLatCountFieldNumber = 7,
    kLonCountFieldNumber = 8,
    kLonStepFieldNumber = 9,
    kLatStepFieldNumber = 10,
  };
  // repeated float datas = 1;
  int datas_size() const;
  void clear_datas();
  float datas(int index) const;
  void set_datas(int index, float value);
  void add_datas(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      datas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_datas();

  // repeated float lats = 11;
  int lats_size() const;
  void clear_lats();
  float lats(int index) const;
  void set_lats(int index, float value);
  void add_lats(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lats();

  // repeated float lons = 12;
  int lons_size() const;
  void clear_lons();
  float lons(int index) const;
  void set_lons(int index, float value);
  void add_lons(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lons();

  // string units = 13;
  void clear_units();
  const std::string& units() const;
  void set_units(const std::string& value);
  void set_units(std::string&& value);
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  std::string* mutable_units();
  std::string* release_units();
  void set_allocated_units(std::string* units);

  // string userEleName = 14;
  void clear_userelename();
  const std::string& userelename() const;
  void set_userelename(const std::string& value);
  void set_userelename(std::string&& value);
  void set_userelename(const char* value);
  void set_userelename(const char* value, size_t size);
  std::string* mutable_userelename();
  std::string* release_userelename();
  void set_allocated_userelename(std::string* userelename);

  // .cma.music.pb.RequestInfo request = 2;
  bool has_request() const;
  void clear_request();
  const ::cma::music::pb::RequestInfo& request() const;
  ::cma::music::pb::RequestInfo* release_request();
  ::cma::music::pb::RequestInfo* mutable_request();
  void set_allocated_request(::cma::music::pb::RequestInfo* request);

  // float startLat = 3;
  void clear_startlat();
  float startlat() const;
  void set_startlat(float value);

  // float startLon = 4;
  void clear_startlon();
  float startlon() const;
  void set_startlon(float value);

  // float endLat = 5;
  void clear_endlat();
  float endlat() const;
  void set_endlat(float value);

  // float endLon = 6;
  void clear_endlon();
  float endlon() const;
  void set_endlon(float value);

  // int32 latCount = 7;
  void clear_latcount();
  ::PROTOBUF_NAMESPACE_ID::int32 latcount() const;
  void set_latcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 lonCount = 8;
  void clear_loncount();
  ::PROTOBUF_NAMESPACE_ID::int32 loncount() const;
  void set_loncount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float lonStep = 9;
  void clear_lonstep();
  float lonstep() const;
  void set_lonstep(float value);

  // float latStep = 10;
  void clear_latstep();
  float latstep() const;
  void set_latstep(float value);

  // @@protoc_insertion_point(class_scope:cma.music.pb.RetGridScalar2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > datas_;
  mutable std::atomic<int> _datas_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lats_;
  mutable std::atomic<int> _lats_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lons_;
  mutable std::atomic<int> _lons_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userelename_;
  ::cma::music::pb::RequestInfo* request_;
  float startlat_;
  float startlon_;
  float endlat_;
  float endlon_;
  ::PROTOBUF_NAMESPACE_ID::int32 latcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 loncount_;
  float lonstep_;
  float latstep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiinterface_2eproto;
};
// -------------------------------------------------------------------

class StoreGridData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cma.music.pb.StoreGridData) */ {
 public:
  StoreGridData();
  virtual ~StoreGridData();

  StoreGridData(const StoreGridData& from);
  StoreGridData(StoreGridData&& from) noexcept
    : StoreGridData() {
    *this = ::std::move(from);
  }

  inline StoreGridData& operator=(const StoreGridData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreGridData& operator=(StoreGridData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreGridData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreGridData* internal_default_instance() {
    return reinterpret_cast<const StoreGridData*>(
               &_StoreGridData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StoreGridData& a, StoreGridData& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreGridData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreGridData* New() const final {
    return CreateMaybeMessage<StoreGridData>(nullptr);
  }

  StoreGridData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreGridData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreGridData& from);
  void MergeFrom(const StoreGridData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreGridData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cma.music.pb.StoreGridData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiinterface_2eproto);
    return ::descriptor_table_apiinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
    kLatsFieldNumber = 3,
    kLonsFieldNumber = 4,
    kDatasFieldNumber = 5,
    kPointflagFieldNumber = 2,
  };
  // repeated string attributes = 1;
  int attributes_size() const;
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();

  // repeated float Lats = 3;
  int lats_size() const;
  void clear_lats();
  float lats(int index) const;
  void set_lats(int index, float value);
  void add_lats(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lats();

  // repeated float Lons = 4;
  int lons_size() const;
  void clear_lons();
  float lons(int index) const;
  void set_lons(int index, float value);
  void add_lons(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      lons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_lons();

  // repeated float datas = 5;
  int datas_size() const;
  void clear_datas();
  float datas(int index) const;
  void set_datas(int index, float value);
  void add_datas(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      datas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_datas();

  // int32 pointflag = 2;
  void clear_pointflag();
  ::PROTOBUF_NAMESPACE_ID::int32 pointflag() const;
  void set_pointflag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:cma.music.pb.StoreGridData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lats_;
  mutable std::atomic<int> _lats_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > lons_;
  mutable std::atomic<int> _lons_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > datas_;
  mutable std::atomic<int> _datas_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 pointflag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiinterface_2eproto;
};
// -------------------------------------------------------------------

class StoreBlockData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cma.music.pb.StoreBlockData) */ {
 public:
  StoreBlockData();
  virtual ~StoreBlockData();

  StoreBlockData(const StoreBlockData& from);
  StoreBlockData(StoreBlockData&& from) noexcept
    : StoreBlockData() {
    *this = ::std::move(from);
  }

  inline StoreBlockData& operator=(const StoreBlockData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreBlockData& operator=(StoreBlockData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StoreBlockData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreBlockData* internal_default_instance() {
    return reinterpret_cast<const StoreBlockData*>(
               &_StoreBlockData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StoreBlockData& a, StoreBlockData& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreBlockData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StoreBlockData* New() const final {
    return CreateMaybeMessage<StoreBlockData>(nullptr);
  }

  StoreBlockData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StoreBlockData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StoreBlockData& from);
  void MergeFrom(const StoreBlockData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreBlockData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cma.music.pb.StoreBlockData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_apiinterface_2eproto);
    return ::descriptor_table_apiinterface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // repeated string attributes = 1;
  int attributes_size() const;
  void clear_attributes();
  const std::string& attributes(int index) const;
  std::string* mutable_attributes(int index);
  void set_attributes(int index, const std::string& value);
  void set_attributes(int index, std::string&& value);
  void set_attributes(int index, const char* value);
  void set_attributes(int index, const char* value, size_t size);
  std::string* add_attributes();
  void add_attributes(const std::string& value);
  void add_attributes(std::string&& value);
  void add_attributes(const char* value);
  void add_attributes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributes();

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:cma.music.pb.StoreBlockData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_apiinterface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestInfo

// int32 errorCode = 1;
inline void RequestInfo::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestInfo::errorcode() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RequestInfo.errorCode)
  return errorcode_;
}
inline void RequestInfo::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RequestInfo.errorCode)
}

// string errorMessage = 2;
inline void RequestInfo::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestInfo::errormessage() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RequestInfo.errorMessage)
  return errormessage_.GetNoArena();
}
inline void RequestInfo::set_errormessage(const std::string& value) {
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RequestInfo.errorMessage)
}
inline void RequestInfo::set_errormessage(std::string&& value) {
  
  errormessage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RequestInfo.errorMessage)
}
inline void RequestInfo::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RequestInfo.errorMessage)
}
inline void RequestInfo::set_errormessage(const char* value, size_t size) {
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RequestInfo.errorMessage)
}
inline std::string* RequestInfo::mutable_errormessage() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RequestInfo.errorMessage)
  return errormessage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestInfo::release_errormessage() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RequestInfo.errorMessage)
  
  return errormessage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInfo::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RequestInfo.errorMessage)
}

// string requestElems = 3;
inline void RequestInfo::clear_requestelems() {
  requestelems_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestInfo::requestelems() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RequestInfo.requestElems)
  return requestelems_.GetNoArena();
}
inline void RequestInfo::set_requestelems(const std::string& value) {
  
  requestelems_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RequestInfo.requestElems)
}
inline void RequestInfo::set_requestelems(std::string&& value) {
  
  requestelems_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RequestInfo.requestElems)
}
inline void RequestInfo::set_requestelems(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestelems_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RequestInfo.requestElems)
}
inline void RequestInfo::set_requestelems(const char* value, size_t size) {
  
  requestelems_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RequestInfo.requestElems)
}
inline std::string* RequestInfo::mutable_requestelems() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RequestInfo.requestElems)
  return requestelems_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestInfo::release_requestelems() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RequestInfo.requestElems)
  
  return requestelems_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInfo::set_allocated_requestelems(std::string* requestelems) {
  if (requestelems != nullptr) {
    
  } else {
    
  }
  requestelems_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestelems);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RequestInfo.requestElems)
}

// string requestParams = 4;
inline void RequestInfo::clear_requestparams() {
  requestparams_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestInfo::requestparams() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RequestInfo.requestParams)
  return requestparams_.GetNoArena();
}
inline void RequestInfo::set_requestparams(const std::string& value) {
  
  requestparams_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RequestInfo.requestParams)
}
inline void RequestInfo::set_requestparams(std::string&& value) {
  
  requestparams_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RequestInfo.requestParams)
}
inline void RequestInfo::set_requestparams(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestparams_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RequestInfo.requestParams)
}
inline void RequestInfo::set_requestparams(const char* value, size_t size) {
  
  requestparams_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RequestInfo.requestParams)
}
inline std::string* RequestInfo::mutable_requestparams() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RequestInfo.requestParams)
  return requestparams_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestInfo::release_requestparams() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RequestInfo.requestParams)
  
  return requestparams_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInfo::set_allocated_requestparams(std::string* requestparams) {
  if (requestparams != nullptr) {
    
  } else {
    
  }
  requestparams_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestparams);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RequestInfo.requestParams)
}

// string requestTime = 5;
inline void RequestInfo::clear_requesttime() {
  requesttime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestInfo::requesttime() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RequestInfo.requestTime)
  return requesttime_.GetNoArena();
}
inline void RequestInfo::set_requesttime(const std::string& value) {
  
  requesttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RequestInfo.requestTime)
}
inline void RequestInfo::set_requesttime(std::string&& value) {
  
  requesttime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RequestInfo.requestTime)
}
inline void RequestInfo::set_requesttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requesttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RequestInfo.requestTime)
}
inline void RequestInfo::set_requesttime(const char* value, size_t size) {
  
  requesttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RequestInfo.requestTime)
}
inline std::string* RequestInfo::mutable_requesttime() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RequestInfo.requestTime)
  return requesttime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestInfo::release_requesttime() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RequestInfo.requestTime)
  
  return requesttime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInfo::set_allocated_requesttime(std::string* requesttime) {
  if (requesttime != nullptr) {
    
  } else {
    
  }
  requesttime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requesttime);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RequestInfo.requestTime)
}

// string responseTime = 6;
inline void RequestInfo::clear_responsetime() {
  responsetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestInfo::responsetime() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RequestInfo.responseTime)
  return responsetime_.GetNoArena();
}
inline void RequestInfo::set_responsetime(const std::string& value) {
  
  responsetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RequestInfo.responseTime)
}
inline void RequestInfo::set_responsetime(std::string&& value) {
  
  responsetime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RequestInfo.responseTime)
}
inline void RequestInfo::set_responsetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  responsetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RequestInfo.responseTime)
}
inline void RequestInfo::set_responsetime(const char* value, size_t size) {
  
  responsetime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RequestInfo.responseTime)
}
inline std::string* RequestInfo::mutable_responsetime() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RequestInfo.responseTime)
  return responsetime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestInfo::release_responsetime() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RequestInfo.responseTime)
  
  return responsetime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestInfo::set_allocated_responsetime(std::string* responsetime) {
  if (responsetime != nullptr) {
    
  } else {
    
  }
  responsetime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responsetime);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RequestInfo.responseTime)
}

// int32 rowCount = 7;
inline void RequestInfo::clear_rowcount() {
  rowcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestInfo::rowcount() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RequestInfo.rowCount)
  return rowcount_;
}
inline void RequestInfo::set_rowcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rowcount_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RequestInfo.rowCount)
}

// int32 takeTime = 8;
inline void RequestInfo::clear_taketime() {
  taketime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestInfo::taketime() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RequestInfo.takeTime)
  return taketime_;
}
inline void RequestInfo::set_taketime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taketime_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RequestInfo.takeTime)
}

// int32 colCount = 9;
inline void RequestInfo::clear_colcount() {
  colcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestInfo::colcount() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RequestInfo.colCount)
  return colcount_;
}
inline void RequestInfo::set_colcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  colcount_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RequestInfo.colCount)
}

// -------------------------------------------------------------------

// RetArray2D

// repeated string data = 1;
inline int RetArray2D::data_size() const {
  return data_.size();
}
inline void RetArray2D::clear_data() {
  data_.Clear();
}
inline const std::string& RetArray2D::data(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetArray2D.data)
  return data_.Get(index);
}
inline std::string* RetArray2D::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetArray2D.data)
  return data_.Mutable(index);
}
inline void RetArray2D::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.RetArray2D.data)
  data_.Mutable(index)->assign(value);
}
inline void RetArray2D::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.RetArray2D.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void RetArray2D::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RetArray2D.data)
}
inline void RetArray2D::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RetArray2D.data)
}
inline std::string* RetArray2D::add_data() {
  // @@protoc_insertion_point(field_add_mutable:cma.music.pb.RetArray2D.data)
  return data_.Add();
}
inline void RetArray2D::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetArray2D.data)
}
inline void RetArray2D::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cma.music.pb.RetArray2D.data)
}
inline void RetArray2D::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cma.music.pb.RetArray2D.data)
}
inline void RetArray2D::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cma.music.pb.RetArray2D.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RetArray2D::data() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetArray2D.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RetArray2D::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetArray2D.data)
  return &data_;
}

// .cma.music.pb.RequestInfo request = 2;
inline bool RetArray2D::has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline void RetArray2D::clear_request() {
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::cma::music::pb::RequestInfo& RetArray2D::request() const {
  const ::cma::music::pb::RequestInfo* p = request_;
  // @@protoc_insertion_point(field_get:cma.music.pb.RetArray2D.request)
  return p != nullptr ? *p : *reinterpret_cast<const ::cma::music::pb::RequestInfo*>(
      &::cma::music::pb::_RequestInfo_default_instance_);
}
inline ::cma::music::pb::RequestInfo* RetArray2D::release_request() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetArray2D.request)
  
  ::cma::music::pb::RequestInfo* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::cma::music::pb::RequestInfo* RetArray2D::mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::cma::music::pb::RequestInfo>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetArray2D.request)
  return request_;
}
inline void RetArray2D::set_allocated_request(::cma::music::pb::RequestInfo* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetArray2D.request)
}

// repeated string elementNames = 3;
inline int RetArray2D::elementnames_size() const {
  return elementnames_.size();
}
inline void RetArray2D::clear_elementnames() {
  elementnames_.Clear();
}
inline const std::string& RetArray2D::elementnames(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetArray2D.elementNames)
  return elementnames_.Get(index);
}
inline std::string* RetArray2D::mutable_elementnames(int index) {
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetArray2D.elementNames)
  return elementnames_.Mutable(index);
}
inline void RetArray2D::set_elementnames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.RetArray2D.elementNames)
  elementnames_.Mutable(index)->assign(value);
}
inline void RetArray2D::set_elementnames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.RetArray2D.elementNames)
  elementnames_.Mutable(index)->assign(std::move(value));
}
inline void RetArray2D::set_elementnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  elementnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RetArray2D.elementNames)
}
inline void RetArray2D::set_elementnames(int index, const char* value, size_t size) {
  elementnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RetArray2D.elementNames)
}
inline std::string* RetArray2D::add_elementnames() {
  // @@protoc_insertion_point(field_add_mutable:cma.music.pb.RetArray2D.elementNames)
  return elementnames_.Add();
}
inline void RetArray2D::add_elementnames(const std::string& value) {
  elementnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetArray2D.elementNames)
}
inline void RetArray2D::add_elementnames(std::string&& value) {
  elementnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cma.music.pb.RetArray2D.elementNames)
}
inline void RetArray2D::add_elementnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  elementnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cma.music.pb.RetArray2D.elementNames)
}
inline void RetArray2D::add_elementnames(const char* value, size_t size) {
  elementnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cma.music.pb.RetArray2D.elementNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RetArray2D::elementnames() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetArray2D.elementNames)
  return elementnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RetArray2D::mutable_elementnames() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetArray2D.elementNames)
  return &elementnames_;
}

// -------------------------------------------------------------------

// RetGridArray2D

// repeated float data = 1;
inline int RetGridArray2D::data_size() const {
  return data_.size();
}
inline void RetGridArray2D::clear_data() {
  data_.Clear();
}
inline float RetGridArray2D::data(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.data)
  return data_.Get(index);
}
inline void RetGridArray2D::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.data)
}
inline void RetGridArray2D::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetGridArray2D.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetGridArray2D::data() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetGridArray2D.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetGridArray2D::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetGridArray2D.data)
  return &data_;
}

// .cma.music.pb.RequestInfo request = 2;
inline bool RetGridArray2D::has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline void RetGridArray2D::clear_request() {
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::cma::music::pb::RequestInfo& RetGridArray2D::request() const {
  const ::cma::music::pb::RequestInfo* p = request_;
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.request)
  return p != nullptr ? *p : *reinterpret_cast<const ::cma::music::pb::RequestInfo*>(
      &::cma::music::pb::_RequestInfo_default_instance_);
}
inline ::cma::music::pb::RequestInfo* RetGridArray2D::release_request() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetGridArray2D.request)
  
  ::cma::music::pb::RequestInfo* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::cma::music::pb::RequestInfo* RetGridArray2D::mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::cma::music::pb::RequestInfo>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetGridArray2D.request)
  return request_;
}
inline void RetGridArray2D::set_allocated_request(::cma::music::pb::RequestInfo* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetGridArray2D.request)
}

// float startLat = 3;
inline void RetGridArray2D::clear_startlat() {
  startlat_ = 0;
}
inline float RetGridArray2D::startlat() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.startLat)
  return startlat_;
}
inline void RetGridArray2D::set_startlat(float value) {
  
  startlat_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.startLat)
}

// float startLon = 4;
inline void RetGridArray2D::clear_startlon() {
  startlon_ = 0;
}
inline float RetGridArray2D::startlon() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.startLon)
  return startlon_;
}
inline void RetGridArray2D::set_startlon(float value) {
  
  startlon_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.startLon)
}

// float endLat = 5;
inline void RetGridArray2D::clear_endlat() {
  endlat_ = 0;
}
inline float RetGridArray2D::endlat() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.endLat)
  return endlat_;
}
inline void RetGridArray2D::set_endlat(float value) {
  
  endlat_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.endLat)
}

// float endLon = 6;
inline void RetGridArray2D::clear_endlon() {
  endlon_ = 0;
}
inline float RetGridArray2D::endlon() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.endLon)
  return endlon_;
}
inline void RetGridArray2D::set_endlon(float value) {
  
  endlon_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.endLon)
}

// int32 latCount = 7;
inline void RetGridArray2D::clear_latcount() {
  latcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetGridArray2D::latcount() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.latCount)
  return latcount_;
}
inline void RetGridArray2D::set_latcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  latcount_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.latCount)
}

// int32 lonCount = 8;
inline void RetGridArray2D::clear_loncount() {
  loncount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetGridArray2D::loncount() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.lonCount)
  return loncount_;
}
inline void RetGridArray2D::set_loncount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loncount_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.lonCount)
}

// float lonStep = 9;
inline void RetGridArray2D::clear_lonstep() {
  lonstep_ = 0;
}
inline float RetGridArray2D::lonstep() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.lonStep)
  return lonstep_;
}
inline void RetGridArray2D::set_lonstep(float value) {
  
  lonstep_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.lonStep)
}

// float latStep = 10;
inline void RetGridArray2D::clear_latstep() {
  latstep_ = 0;
}
inline float RetGridArray2D::latstep() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.latStep)
  return latstep_;
}
inline void RetGridArray2D::set_latstep(float value) {
  
  latstep_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.latStep)
}

// repeated float lats = 11;
inline int RetGridArray2D::lats_size() const {
  return lats_.size();
}
inline void RetGridArray2D::clear_lats() {
  lats_.Clear();
}
inline float RetGridArray2D::lats(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.lats)
  return lats_.Get(index);
}
inline void RetGridArray2D::set_lats(int index, float value) {
  lats_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.lats)
}
inline void RetGridArray2D::add_lats(float value) {
  lats_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetGridArray2D.lats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetGridArray2D::lats() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetGridArray2D.lats)
  return lats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetGridArray2D::mutable_lats() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetGridArray2D.lats)
  return &lats_;
}

// repeated float lons = 12;
inline int RetGridArray2D::lons_size() const {
  return lons_.size();
}
inline void RetGridArray2D::clear_lons() {
  lons_.Clear();
}
inline float RetGridArray2D::lons(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.lons)
  return lons_.Get(index);
}
inline void RetGridArray2D::set_lons(int index, float value) {
  lons_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.lons)
}
inline void RetGridArray2D::add_lons(float value) {
  lons_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetGridArray2D.lons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetGridArray2D::lons() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetGridArray2D.lons)
  return lons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetGridArray2D::mutable_lons() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetGridArray2D.lons)
  return &lons_;
}

// string units = 13;
inline void RetGridArray2D::clear_units() {
  units_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetGridArray2D::units() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.units)
  return units_.GetNoArena();
}
inline void RetGridArray2D::set_units(const std::string& value) {
  
  units_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.units)
}
inline void RetGridArray2D::set_units(std::string&& value) {
  
  units_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RetGridArray2D.units)
}
inline void RetGridArray2D::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  units_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RetGridArray2D.units)
}
inline void RetGridArray2D::set_units(const char* value, size_t size) {
  
  units_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RetGridArray2D.units)
}
inline std::string* RetGridArray2D::mutable_units() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetGridArray2D.units)
  return units_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetGridArray2D::release_units() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetGridArray2D.units)
  
  return units_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetGridArray2D::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetGridArray2D.units)
}

// string userEleName = 14;
inline void RetGridArray2D::clear_userelename() {
  userelename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetGridArray2D::userelename() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridArray2D.userEleName)
  return userelename_.GetNoArena();
}
inline void RetGridArray2D::set_userelename(const std::string& value) {
  
  userelename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridArray2D.userEleName)
}
inline void RetGridArray2D::set_userelename(std::string&& value) {
  
  userelename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RetGridArray2D.userEleName)
}
inline void RetGridArray2D::set_userelename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userelename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RetGridArray2D.userEleName)
}
inline void RetGridArray2D::set_userelename(const char* value, size_t size) {
  
  userelename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RetGridArray2D.userEleName)
}
inline std::string* RetGridArray2D::mutable_userelename() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetGridArray2D.userEleName)
  return userelename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetGridArray2D::release_userelename() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetGridArray2D.userEleName)
  
  return userelename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetGridArray2D::set_allocated_userelename(std::string* userelename) {
  if (userelename != nullptr) {
    
  } else {
    
  }
  userelename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userelename);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetGridArray2D.userEleName)
}

// -------------------------------------------------------------------

// FileInfo

// string fileName = 1;
inline void FileInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::filename() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.FileInfo.fileName)
  return filename_.GetNoArena();
}
inline void FileInfo::set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.FileInfo.fileName)
}
inline void FileInfo::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.FileInfo.fileName)
}
inline void FileInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.FileInfo.fileName)
}
inline void FileInfo::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.FileInfo.fileName)
}
inline std::string* FileInfo::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.FileInfo.fileName)
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:cma.music.pb.FileInfo.fileName)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.FileInfo.fileName)
}

// string savePath = 2;
inline void FileInfo::clear_savepath() {
  savepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::savepath() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.FileInfo.savePath)
  return savepath_.GetNoArena();
}
inline void FileInfo::set_savepath(const std::string& value) {
  
  savepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.FileInfo.savePath)
}
inline void FileInfo::set_savepath(std::string&& value) {
  
  savepath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.FileInfo.savePath)
}
inline void FileInfo::set_savepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  savepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.FileInfo.savePath)
}
inline void FileInfo::set_savepath(const char* value, size_t size) {
  
  savepath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.FileInfo.savePath)
}
inline std::string* FileInfo::mutable_savepath() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.FileInfo.savePath)
  return savepath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_savepath() {
  // @@protoc_insertion_point(field_release:cma.music.pb.FileInfo.savePath)
  
  return savepath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_savepath(std::string* savepath) {
  if (savepath != nullptr) {
    
  } else {
    
  }
  savepath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), savepath);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.FileInfo.savePath)
}

// string suffix = 3;
inline void FileInfo::clear_suffix() {
  suffix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::suffix() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.FileInfo.suffix)
  return suffix_.GetNoArena();
}
inline void FileInfo::set_suffix(const std::string& value) {
  
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.FileInfo.suffix)
}
inline void FileInfo::set_suffix(std::string&& value) {
  
  suffix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.FileInfo.suffix)
}
inline void FileInfo::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.FileInfo.suffix)
}
inline void FileInfo::set_suffix(const char* value, size_t size) {
  
  suffix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.FileInfo.suffix)
}
inline std::string* FileInfo::mutable_suffix() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.FileInfo.suffix)
  return suffix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_suffix() {
  // @@protoc_insertion_point(field_release:cma.music.pb.FileInfo.suffix)
  
  return suffix_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    
  } else {
    
  }
  suffix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.FileInfo.suffix)
}

// string size = 4;
inline void FileInfo::clear_size() {
  size_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::size() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.FileInfo.size)
  return size_.GetNoArena();
}
inline void FileInfo::set_size(const std::string& value) {
  
  size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.FileInfo.size)
}
inline void FileInfo::set_size(std::string&& value) {
  
  size_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.FileInfo.size)
}
inline void FileInfo::set_size(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.FileInfo.size)
}
inline void FileInfo::set_size(const char* value, size_t size) {
  
  size_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.FileInfo.size)
}
inline std::string* FileInfo::mutable_size() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.FileInfo.size)
  return size_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_size() {
  // @@protoc_insertion_point(field_release:cma.music.pb.FileInfo.size)
  
  return size_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_size(std::string* size) {
  if (size != nullptr) {
    
  } else {
    
  }
  size_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), size);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.FileInfo.size)
}

// string fileUrl = 5;
inline void FileInfo::clear_fileurl() {
  fileurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::fileurl() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.FileInfo.fileUrl)
  return fileurl_.GetNoArena();
}
inline void FileInfo::set_fileurl(const std::string& value) {
  
  fileurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.FileInfo.fileUrl)
}
inline void FileInfo::set_fileurl(std::string&& value) {
  
  fileurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.FileInfo.fileUrl)
}
inline void FileInfo::set_fileurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fileurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.FileInfo.fileUrl)
}
inline void FileInfo::set_fileurl(const char* value, size_t size) {
  
  fileurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.FileInfo.fileUrl)
}
inline std::string* FileInfo::mutable_fileurl() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.FileInfo.fileUrl)
  return fileurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_fileurl() {
  // @@protoc_insertion_point(field_release:cma.music.pb.FileInfo.fileUrl)
  
  return fileurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_fileurl(std::string* fileurl) {
  if (fileurl != nullptr) {
    
  } else {
    
  }
  fileurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fileurl);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.FileInfo.fileUrl)
}

// string imgBase64 = 6;
inline void FileInfo::clear_imgbase64() {
  imgbase64_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FileInfo::imgbase64() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.FileInfo.imgBase64)
  return imgbase64_.GetNoArena();
}
inline void FileInfo::set_imgbase64(const std::string& value) {
  
  imgbase64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.FileInfo.imgBase64)
}
inline void FileInfo::set_imgbase64(std::string&& value) {
  
  imgbase64_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.FileInfo.imgBase64)
}
inline void FileInfo::set_imgbase64(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imgbase64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.FileInfo.imgBase64)
}
inline void FileInfo::set_imgbase64(const char* value, size_t size) {
  
  imgbase64_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.FileInfo.imgBase64)
}
inline std::string* FileInfo::mutable_imgbase64() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.FileInfo.imgBase64)
  return imgbase64_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileInfo::release_imgbase64() {
  // @@protoc_insertion_point(field_release:cma.music.pb.FileInfo.imgBase64)
  
  return imgbase64_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_imgbase64(std::string* imgbase64) {
  if (imgbase64 != nullptr) {
    
  } else {
    
  }
  imgbase64_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgbase64);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.FileInfo.imgBase64)
}

// repeated string attributes = 7;
inline int FileInfo::attributes_size() const {
  return attributes_.size();
}
inline void FileInfo::clear_attributes() {
  attributes_.Clear();
}
inline const std::string& FileInfo::attributes(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.FileInfo.attributes)
  return attributes_.Get(index);
}
inline std::string* FileInfo::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:cma.music.pb.FileInfo.attributes)
  return attributes_.Mutable(index);
}
inline void FileInfo::set_attributes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.FileInfo.attributes)
  attributes_.Mutable(index)->assign(value);
}
inline void FileInfo::set_attributes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.FileInfo.attributes)
  attributes_.Mutable(index)->assign(std::move(value));
}
inline void FileInfo::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cma.music.pb.FileInfo.attributes)
}
inline void FileInfo::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.FileInfo.attributes)
}
inline std::string* FileInfo::add_attributes() {
  // @@protoc_insertion_point(field_add_mutable:cma.music.pb.FileInfo.attributes)
  return attributes_.Add();
}
inline void FileInfo::add_attributes(const std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.FileInfo.attributes)
}
inline void FileInfo::add_attributes(std::string&& value) {
  attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cma.music.pb.FileInfo.attributes)
}
inline void FileInfo::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cma.music.pb.FileInfo.attributes)
}
inline void FileInfo::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cma.music.pb.FileInfo.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FileInfo::attributes() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.FileInfo.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FileInfo::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.FileInfo.attributes)
  return &attributes_;
}

// -------------------------------------------------------------------

// RetFilesInfo

// repeated .cma.music.pb.FileInfo fileInfos = 1;
inline int RetFilesInfo::fileinfos_size() const {
  return fileinfos_.size();
}
inline void RetFilesInfo::clear_fileinfos() {
  fileinfos_.Clear();
}
inline ::cma::music::pb::FileInfo* RetFilesInfo::mutable_fileinfos(int index) {
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetFilesInfo.fileInfos)
  return fileinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cma::music::pb::FileInfo >*
RetFilesInfo::mutable_fileinfos() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetFilesInfo.fileInfos)
  return &fileinfos_;
}
inline const ::cma::music::pb::FileInfo& RetFilesInfo::fileinfos(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetFilesInfo.fileInfos)
  return fileinfos_.Get(index);
}
inline ::cma::music::pb::FileInfo* RetFilesInfo::add_fileinfos() {
  // @@protoc_insertion_point(field_add:cma.music.pb.RetFilesInfo.fileInfos)
  return fileinfos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cma::music::pb::FileInfo >&
RetFilesInfo::fileinfos() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetFilesInfo.fileInfos)
  return fileinfos_;
}

// .cma.music.pb.RequestInfo request = 2;
inline bool RetFilesInfo::has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline void RetFilesInfo::clear_request() {
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::cma::music::pb::RequestInfo& RetFilesInfo::request() const {
  const ::cma::music::pb::RequestInfo* p = request_;
  // @@protoc_insertion_point(field_get:cma.music.pb.RetFilesInfo.request)
  return p != nullptr ? *p : *reinterpret_cast<const ::cma::music::pb::RequestInfo*>(
      &::cma::music::pb::_RequestInfo_default_instance_);
}
inline ::cma::music::pb::RequestInfo* RetFilesInfo::release_request() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetFilesInfo.request)
  
  ::cma::music::pb::RequestInfo* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::cma::music::pb::RequestInfo* RetFilesInfo::mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::cma::music::pb::RequestInfo>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetFilesInfo.request)
  return request_;
}
inline void RetFilesInfo::set_allocated_request(::cma::music::pb::RequestInfo* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetFilesInfo.request)
}

// -------------------------------------------------------------------

// StoreArray2D

// repeated string data = 1;
inline int StoreArray2D::data_size() const {
  return data_.size();
}
inline void StoreArray2D::clear_data() {
  data_.Clear();
}
inline const std::string& StoreArray2D::data(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreArray2D.data)
  return data_.Get(index);
}
inline std::string* StoreArray2D::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:cma.music.pb.StoreArray2D.data)
  return data_.Mutable(index);
}
inline void StoreArray2D::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreArray2D.data)
  data_.Mutable(index)->assign(value);
}
inline void StoreArray2D::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreArray2D.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void StoreArray2D::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cma.music.pb.StoreArray2D.data)
}
inline void StoreArray2D::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.StoreArray2D.data)
}
inline std::string* StoreArray2D::add_data() {
  // @@protoc_insertion_point(field_add_mutable:cma.music.pb.StoreArray2D.data)
  return data_.Add();
}
inline void StoreArray2D::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.StoreArray2D.data)
}
inline void StoreArray2D::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cma.music.pb.StoreArray2D.data)
}
inline void StoreArray2D::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cma.music.pb.StoreArray2D.data)
}
inline void StoreArray2D::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cma.music.pb.StoreArray2D.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StoreArray2D::data() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.StoreArray2D.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StoreArray2D::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.StoreArray2D.data)
  return &data_;
}

// int32 row = 2;
inline void StoreArray2D::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoreArray2D::row() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreArray2D.row)
  return row_;
}
inline void StoreArray2D::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreArray2D.row)
}

// int32 col = 3;
inline void StoreArray2D::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoreArray2D::col() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreArray2D.col)
  return col_;
}
inline void StoreArray2D::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreArray2D.col)
}

// int32 fileflag = 4;
inline void StoreArray2D::clear_fileflag() {
  fileflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoreArray2D::fileflag() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreArray2D.fileflag)
  return fileflag_;
}
inline void StoreArray2D::set_fileflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fileflag_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreArray2D.fileflag)
}

// repeated string filenames = 5;
inline int StoreArray2D::filenames_size() const {
  return filenames_.size();
}
inline void StoreArray2D::clear_filenames() {
  filenames_.Clear();
}
inline const std::string& StoreArray2D::filenames(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreArray2D.filenames)
  return filenames_.Get(index);
}
inline std::string* StoreArray2D::mutable_filenames(int index) {
  // @@protoc_insertion_point(field_mutable:cma.music.pb.StoreArray2D.filenames)
  return filenames_.Mutable(index);
}
inline void StoreArray2D::set_filenames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreArray2D.filenames)
  filenames_.Mutable(index)->assign(value);
}
inline void StoreArray2D::set_filenames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreArray2D.filenames)
  filenames_.Mutable(index)->assign(std::move(value));
}
inline void StoreArray2D::set_filenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cma.music.pb.StoreArray2D.filenames)
}
inline void StoreArray2D::set_filenames(int index, const char* value, size_t size) {
  filenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.StoreArray2D.filenames)
}
inline std::string* StoreArray2D::add_filenames() {
  // @@protoc_insertion_point(field_add_mutable:cma.music.pb.StoreArray2D.filenames)
  return filenames_.Add();
}
inline void StoreArray2D::add_filenames(const std::string& value) {
  filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.StoreArray2D.filenames)
}
inline void StoreArray2D::add_filenames(std::string&& value) {
  filenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cma.music.pb.StoreArray2D.filenames)
}
inline void StoreArray2D::add_filenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cma.music.pb.StoreArray2D.filenames)
}
inline void StoreArray2D::add_filenames(const char* value, size_t size) {
  filenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cma.music.pb.StoreArray2D.filenames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StoreArray2D::filenames() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.StoreArray2D.filenames)
  return filenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StoreArray2D::mutable_filenames() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.StoreArray2D.filenames)
  return &filenames_;
}

// int32 is_backstage = 6;
inline void StoreArray2D::clear_is_backstage() {
  is_backstage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoreArray2D::is_backstage() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreArray2D.is_backstage)
  return is_backstage_;
}
inline void StoreArray2D::set_is_backstage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_backstage_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreArray2D.is_backstage)
}

// string client_mount_path = 7;
inline void StoreArray2D::clear_client_mount_path() {
  client_mount_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StoreArray2D::client_mount_path() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreArray2D.client_mount_path)
  return client_mount_path_.GetNoArena();
}
inline void StoreArray2D::set_client_mount_path(const std::string& value) {
  
  client_mount_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreArray2D.client_mount_path)
}
inline void StoreArray2D::set_client_mount_path(std::string&& value) {
  
  client_mount_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.StoreArray2D.client_mount_path)
}
inline void StoreArray2D::set_client_mount_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_mount_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.StoreArray2D.client_mount_path)
}
inline void StoreArray2D::set_client_mount_path(const char* value, size_t size) {
  
  client_mount_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.StoreArray2D.client_mount_path)
}
inline std::string* StoreArray2D::mutable_client_mount_path() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.StoreArray2D.client_mount_path)
  return client_mount_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoreArray2D::release_client_mount_path() {
  // @@protoc_insertion_point(field_release:cma.music.pb.StoreArray2D.client_mount_path)
  
  return client_mount_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoreArray2D::set_allocated_client_mount_path(std::string* client_mount_path) {
  if (client_mount_path != nullptr) {
    
  } else {
    
  }
  client_mount_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_mount_path);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.StoreArray2D.client_mount_path)
}

// string server_mount_path = 8;
inline void StoreArray2D::clear_server_mount_path() {
  server_mount_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StoreArray2D::server_mount_path() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreArray2D.server_mount_path)
  return server_mount_path_.GetNoArena();
}
inline void StoreArray2D::set_server_mount_path(const std::string& value) {
  
  server_mount_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreArray2D.server_mount_path)
}
inline void StoreArray2D::set_server_mount_path(std::string&& value) {
  
  server_mount_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.StoreArray2D.server_mount_path)
}
inline void StoreArray2D::set_server_mount_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_mount_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.StoreArray2D.server_mount_path)
}
inline void StoreArray2D::set_server_mount_path(const char* value, size_t size) {
  
  server_mount_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.StoreArray2D.server_mount_path)
}
inline std::string* StoreArray2D::mutable_server_mount_path() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.StoreArray2D.server_mount_path)
  return server_mount_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoreArray2D::release_server_mount_path() {
  // @@protoc_insertion_point(field_release:cma.music.pb.StoreArray2D.server_mount_path)
  
  return server_mount_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoreArray2D::set_allocated_server_mount_path(std::string* server_mount_path) {
  if (server_mount_path != nullptr) {
    
  } else {
    
  }
  server_mount_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_mount_path);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.StoreArray2D.server_mount_path)
}

// -------------------------------------------------------------------

// RetDataBlock

// string dataName = 1;
inline void RetDataBlock::clear_dataname() {
  dataname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetDataBlock::dataname() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetDataBlock.dataName)
  return dataname_.GetNoArena();
}
inline void RetDataBlock::set_dataname(const std::string& value) {
  
  dataname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetDataBlock.dataName)
}
inline void RetDataBlock::set_dataname(std::string&& value) {
  
  dataname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RetDataBlock.dataName)
}
inline void RetDataBlock::set_dataname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RetDataBlock.dataName)
}
inline void RetDataBlock::set_dataname(const char* value, size_t size) {
  
  dataname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RetDataBlock.dataName)
}
inline std::string* RetDataBlock::mutable_dataname() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetDataBlock.dataName)
  return dataname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetDataBlock::release_dataname() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetDataBlock.dataName)
  
  return dataname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetDataBlock::set_allocated_dataname(std::string* dataname) {
  if (dataname != nullptr) {
    
  } else {
    
  }
  dataname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataname);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetDataBlock.dataName)
}

// bytes byteArray = 2;
inline void RetDataBlock::clear_bytearray() {
  bytearray_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetDataBlock::bytearray() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetDataBlock.byteArray)
  return bytearray_.GetNoArena();
}
inline void RetDataBlock::set_bytearray(const std::string& value) {
  
  bytearray_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetDataBlock.byteArray)
}
inline void RetDataBlock::set_bytearray(std::string&& value) {
  
  bytearray_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RetDataBlock.byteArray)
}
inline void RetDataBlock::set_bytearray(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bytearray_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RetDataBlock.byteArray)
}
inline void RetDataBlock::set_bytearray(const void* value, size_t size) {
  
  bytearray_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RetDataBlock.byteArray)
}
inline std::string* RetDataBlock::mutable_bytearray() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetDataBlock.byteArray)
  return bytearray_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetDataBlock::release_bytearray() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetDataBlock.byteArray)
  
  return bytearray_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetDataBlock::set_allocated_bytearray(std::string* bytearray) {
  if (bytearray != nullptr) {
    
  } else {
    
  }
  bytearray_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytearray);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetDataBlock.byteArray)
}

// .cma.music.pb.RequestInfo request = 3;
inline bool RetDataBlock::has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline void RetDataBlock::clear_request() {
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::cma::music::pb::RequestInfo& RetDataBlock::request() const {
  const ::cma::music::pb::RequestInfo* p = request_;
  // @@protoc_insertion_point(field_get:cma.music.pb.RetDataBlock.request)
  return p != nullptr ? *p : *reinterpret_cast<const ::cma::music::pb::RequestInfo*>(
      &::cma::music::pb::_RequestInfo_default_instance_);
}
inline ::cma::music::pb::RequestInfo* RetDataBlock::release_request() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetDataBlock.request)
  
  ::cma::music::pb::RequestInfo* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::cma::music::pb::RequestInfo* RetDataBlock::mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::cma::music::pb::RequestInfo>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetDataBlock.request)
  return request_;
}
inline void RetDataBlock::set_allocated_request(::cma::music::pb::RequestInfo* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetDataBlock.request)
}

// -------------------------------------------------------------------

// RetGridVector2D

// repeated float u_datas = 1;
inline int RetGridVector2D::u_datas_size() const {
  return u_datas_.size();
}
inline void RetGridVector2D::clear_u_datas() {
  u_datas_.Clear();
}
inline float RetGridVector2D::u_datas(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.u_datas)
  return u_datas_.Get(index);
}
inline void RetGridVector2D::set_u_datas(int index, float value) {
  u_datas_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.u_datas)
}
inline void RetGridVector2D::add_u_datas(float value) {
  u_datas_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetGridVector2D.u_datas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetGridVector2D::u_datas() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetGridVector2D.u_datas)
  return u_datas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetGridVector2D::mutable_u_datas() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetGridVector2D.u_datas)
  return &u_datas_;
}

// repeated float v_data2 = 2;
inline int RetGridVector2D::v_data2_size() const {
  return v_data2_.size();
}
inline void RetGridVector2D::clear_v_data2() {
  v_data2_.Clear();
}
inline float RetGridVector2D::v_data2(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.v_data2)
  return v_data2_.Get(index);
}
inline void RetGridVector2D::set_v_data2(int index, float value) {
  v_data2_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.v_data2)
}
inline void RetGridVector2D::add_v_data2(float value) {
  v_data2_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetGridVector2D.v_data2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetGridVector2D::v_data2() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetGridVector2D.v_data2)
  return v_data2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetGridVector2D::mutable_v_data2() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetGridVector2D.v_data2)
  return &v_data2_;
}

// .cma.music.pb.RequestInfo request = 3;
inline bool RetGridVector2D::has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline void RetGridVector2D::clear_request() {
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::cma::music::pb::RequestInfo& RetGridVector2D::request() const {
  const ::cma::music::pb::RequestInfo* p = request_;
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.request)
  return p != nullptr ? *p : *reinterpret_cast<const ::cma::music::pb::RequestInfo*>(
      &::cma::music::pb::_RequestInfo_default_instance_);
}
inline ::cma::music::pb::RequestInfo* RetGridVector2D::release_request() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetGridVector2D.request)
  
  ::cma::music::pb::RequestInfo* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::cma::music::pb::RequestInfo* RetGridVector2D::mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::cma::music::pb::RequestInfo>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetGridVector2D.request)
  return request_;
}
inline void RetGridVector2D::set_allocated_request(::cma::music::pb::RequestInfo* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetGridVector2D.request)
}

// float startLat = 4;
inline void RetGridVector2D::clear_startlat() {
  startlat_ = 0;
}
inline float RetGridVector2D::startlat() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.startLat)
  return startlat_;
}
inline void RetGridVector2D::set_startlat(float value) {
  
  startlat_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.startLat)
}

// float startLon = 5;
inline void RetGridVector2D::clear_startlon() {
  startlon_ = 0;
}
inline float RetGridVector2D::startlon() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.startLon)
  return startlon_;
}
inline void RetGridVector2D::set_startlon(float value) {
  
  startlon_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.startLon)
}

// float endLat = 6;
inline void RetGridVector2D::clear_endlat() {
  endlat_ = 0;
}
inline float RetGridVector2D::endlat() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.endLat)
  return endlat_;
}
inline void RetGridVector2D::set_endlat(float value) {
  
  endlat_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.endLat)
}

// float endLon = 7;
inline void RetGridVector2D::clear_endlon() {
  endlon_ = 0;
}
inline float RetGridVector2D::endlon() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.endLon)
  return endlon_;
}
inline void RetGridVector2D::set_endlon(float value) {
  
  endlon_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.endLon)
}

// int32 latCount = 8;
inline void RetGridVector2D::clear_latcount() {
  latcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetGridVector2D::latcount() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.latCount)
  return latcount_;
}
inline void RetGridVector2D::set_latcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  latcount_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.latCount)
}

// int32 lonCount = 9;
inline void RetGridVector2D::clear_loncount() {
  loncount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetGridVector2D::loncount() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.lonCount)
  return loncount_;
}
inline void RetGridVector2D::set_loncount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loncount_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.lonCount)
}

// float lonStep = 10;
inline void RetGridVector2D::clear_lonstep() {
  lonstep_ = 0;
}
inline float RetGridVector2D::lonstep() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.lonStep)
  return lonstep_;
}
inline void RetGridVector2D::set_lonstep(float value) {
  
  lonstep_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.lonStep)
}

// float latStep = 11;
inline void RetGridVector2D::clear_latstep() {
  latstep_ = 0;
}
inline float RetGridVector2D::latstep() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.latStep)
  return latstep_;
}
inline void RetGridVector2D::set_latstep(float value) {
  
  latstep_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.latStep)
}

// repeated float lats = 12;
inline int RetGridVector2D::lats_size() const {
  return lats_.size();
}
inline void RetGridVector2D::clear_lats() {
  lats_.Clear();
}
inline float RetGridVector2D::lats(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.lats)
  return lats_.Get(index);
}
inline void RetGridVector2D::set_lats(int index, float value) {
  lats_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.lats)
}
inline void RetGridVector2D::add_lats(float value) {
  lats_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetGridVector2D.lats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetGridVector2D::lats() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetGridVector2D.lats)
  return lats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetGridVector2D::mutable_lats() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetGridVector2D.lats)
  return &lats_;
}

// repeated float lons = 13;
inline int RetGridVector2D::lons_size() const {
  return lons_.size();
}
inline void RetGridVector2D::clear_lons() {
  lons_.Clear();
}
inline float RetGridVector2D::lons(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.lons)
  return lons_.Get(index);
}
inline void RetGridVector2D::set_lons(int index, float value) {
  lons_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.lons)
}
inline void RetGridVector2D::add_lons(float value) {
  lons_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetGridVector2D.lons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetGridVector2D::lons() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetGridVector2D.lons)
  return lons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetGridVector2D::mutable_lons() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetGridVector2D.lons)
  return &lons_;
}

// string u_EleName = 14;
inline void RetGridVector2D::clear_u_elename() {
  u_elename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetGridVector2D::u_elename() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.u_EleName)
  return u_elename_.GetNoArena();
}
inline void RetGridVector2D::set_u_elename(const std::string& value) {
  
  u_elename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.u_EleName)
}
inline void RetGridVector2D::set_u_elename(std::string&& value) {
  
  u_elename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RetGridVector2D.u_EleName)
}
inline void RetGridVector2D::set_u_elename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  u_elename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RetGridVector2D.u_EleName)
}
inline void RetGridVector2D::set_u_elename(const char* value, size_t size) {
  
  u_elename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RetGridVector2D.u_EleName)
}
inline std::string* RetGridVector2D::mutable_u_elename() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetGridVector2D.u_EleName)
  return u_elename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetGridVector2D::release_u_elename() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetGridVector2D.u_EleName)
  
  return u_elename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetGridVector2D::set_allocated_u_elename(std::string* u_elename) {
  if (u_elename != nullptr) {
    
  } else {
    
  }
  u_elename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), u_elename);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetGridVector2D.u_EleName)
}

// string v_EleName = 15;
inline void RetGridVector2D::clear_v_elename() {
  v_elename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetGridVector2D::v_elename() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridVector2D.v_EleName)
  return v_elename_.GetNoArena();
}
inline void RetGridVector2D::set_v_elename(const std::string& value) {
  
  v_elename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridVector2D.v_EleName)
}
inline void RetGridVector2D::set_v_elename(std::string&& value) {
  
  v_elename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RetGridVector2D.v_EleName)
}
inline void RetGridVector2D::set_v_elename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_elename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RetGridVector2D.v_EleName)
}
inline void RetGridVector2D::set_v_elename(const char* value, size_t size) {
  
  v_elename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RetGridVector2D.v_EleName)
}
inline std::string* RetGridVector2D::mutable_v_elename() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetGridVector2D.v_EleName)
  return v_elename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetGridVector2D::release_v_elename() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetGridVector2D.v_EleName)
  
  return v_elename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetGridVector2D::set_allocated_v_elename(std::string* v_elename) {
  if (v_elename != nullptr) {
    
  } else {
    
  }
  v_elename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v_elename);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetGridVector2D.v_EleName)
}

// -------------------------------------------------------------------

// RetGridScalar2D

// repeated float datas = 1;
inline int RetGridScalar2D::datas_size() const {
  return datas_.size();
}
inline void RetGridScalar2D::clear_datas() {
  datas_.Clear();
}
inline float RetGridScalar2D::datas(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.datas)
  return datas_.Get(index);
}
inline void RetGridScalar2D::set_datas(int index, float value) {
  datas_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.datas)
}
inline void RetGridScalar2D::add_datas(float value) {
  datas_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetGridScalar2D.datas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetGridScalar2D::datas() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetGridScalar2D.datas)
  return datas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetGridScalar2D::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetGridScalar2D.datas)
  return &datas_;
}

// .cma.music.pb.RequestInfo request = 2;
inline bool RetGridScalar2D::has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline void RetGridScalar2D::clear_request() {
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::cma::music::pb::RequestInfo& RetGridScalar2D::request() const {
  const ::cma::music::pb::RequestInfo* p = request_;
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.request)
  return p != nullptr ? *p : *reinterpret_cast<const ::cma::music::pb::RequestInfo*>(
      &::cma::music::pb::_RequestInfo_default_instance_);
}
inline ::cma::music::pb::RequestInfo* RetGridScalar2D::release_request() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetGridScalar2D.request)
  
  ::cma::music::pb::RequestInfo* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::cma::music::pb::RequestInfo* RetGridScalar2D::mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::cma::music::pb::RequestInfo>(GetArenaNoVirtual());
    request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetGridScalar2D.request)
  return request_;
}
inline void RetGridScalar2D::set_allocated_request(::cma::music::pb::RequestInfo* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetGridScalar2D.request)
}

// float startLat = 3;
inline void RetGridScalar2D::clear_startlat() {
  startlat_ = 0;
}
inline float RetGridScalar2D::startlat() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.startLat)
  return startlat_;
}
inline void RetGridScalar2D::set_startlat(float value) {
  
  startlat_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.startLat)
}

// float startLon = 4;
inline void RetGridScalar2D::clear_startlon() {
  startlon_ = 0;
}
inline float RetGridScalar2D::startlon() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.startLon)
  return startlon_;
}
inline void RetGridScalar2D::set_startlon(float value) {
  
  startlon_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.startLon)
}

// float endLat = 5;
inline void RetGridScalar2D::clear_endlat() {
  endlat_ = 0;
}
inline float RetGridScalar2D::endlat() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.endLat)
  return endlat_;
}
inline void RetGridScalar2D::set_endlat(float value) {
  
  endlat_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.endLat)
}

// float endLon = 6;
inline void RetGridScalar2D::clear_endlon() {
  endlon_ = 0;
}
inline float RetGridScalar2D::endlon() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.endLon)
  return endlon_;
}
inline void RetGridScalar2D::set_endlon(float value) {
  
  endlon_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.endLon)
}

// int32 latCount = 7;
inline void RetGridScalar2D::clear_latcount() {
  latcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetGridScalar2D::latcount() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.latCount)
  return latcount_;
}
inline void RetGridScalar2D::set_latcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  latcount_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.latCount)
}

// int32 lonCount = 8;
inline void RetGridScalar2D::clear_loncount() {
  loncount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RetGridScalar2D::loncount() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.lonCount)
  return loncount_;
}
inline void RetGridScalar2D::set_loncount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  loncount_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.lonCount)
}

// float lonStep = 9;
inline void RetGridScalar2D::clear_lonstep() {
  lonstep_ = 0;
}
inline float RetGridScalar2D::lonstep() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.lonStep)
  return lonstep_;
}
inline void RetGridScalar2D::set_lonstep(float value) {
  
  lonstep_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.lonStep)
}

// float latStep = 10;
inline void RetGridScalar2D::clear_latstep() {
  latstep_ = 0;
}
inline float RetGridScalar2D::latstep() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.latStep)
  return latstep_;
}
inline void RetGridScalar2D::set_latstep(float value) {
  
  latstep_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.latStep)
}

// repeated float lats = 11;
inline int RetGridScalar2D::lats_size() const {
  return lats_.size();
}
inline void RetGridScalar2D::clear_lats() {
  lats_.Clear();
}
inline float RetGridScalar2D::lats(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.lats)
  return lats_.Get(index);
}
inline void RetGridScalar2D::set_lats(int index, float value) {
  lats_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.lats)
}
inline void RetGridScalar2D::add_lats(float value) {
  lats_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetGridScalar2D.lats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetGridScalar2D::lats() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetGridScalar2D.lats)
  return lats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetGridScalar2D::mutable_lats() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetGridScalar2D.lats)
  return &lats_;
}

// repeated float lons = 12;
inline int RetGridScalar2D::lons_size() const {
  return lons_.size();
}
inline void RetGridScalar2D::clear_lons() {
  lons_.Clear();
}
inline float RetGridScalar2D::lons(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.lons)
  return lons_.Get(index);
}
inline void RetGridScalar2D::set_lons(int index, float value) {
  lons_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.lons)
}
inline void RetGridScalar2D::add_lons(float value) {
  lons_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.RetGridScalar2D.lons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
RetGridScalar2D::lons() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.RetGridScalar2D.lons)
  return lons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
RetGridScalar2D::mutable_lons() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.RetGridScalar2D.lons)
  return &lons_;
}

// string units = 13;
inline void RetGridScalar2D::clear_units() {
  units_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetGridScalar2D::units() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.units)
  return units_.GetNoArena();
}
inline void RetGridScalar2D::set_units(const std::string& value) {
  
  units_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.units)
}
inline void RetGridScalar2D::set_units(std::string&& value) {
  
  units_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RetGridScalar2D.units)
}
inline void RetGridScalar2D::set_units(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  units_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RetGridScalar2D.units)
}
inline void RetGridScalar2D::set_units(const char* value, size_t size) {
  
  units_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RetGridScalar2D.units)
}
inline std::string* RetGridScalar2D::mutable_units() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetGridScalar2D.units)
  return units_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetGridScalar2D::release_units() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetGridScalar2D.units)
  
  return units_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetGridScalar2D::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetGridScalar2D.units)
}

// string userEleName = 14;
inline void RetGridScalar2D::clear_userelename() {
  userelename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetGridScalar2D::userelename() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.RetGridScalar2D.userEleName)
  return userelename_.GetNoArena();
}
inline void RetGridScalar2D::set_userelename(const std::string& value) {
  
  userelename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.RetGridScalar2D.userEleName)
}
inline void RetGridScalar2D::set_userelename(std::string&& value) {
  
  userelename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.RetGridScalar2D.userEleName)
}
inline void RetGridScalar2D::set_userelename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userelename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.RetGridScalar2D.userEleName)
}
inline void RetGridScalar2D::set_userelename(const char* value, size_t size) {
  
  userelename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.RetGridScalar2D.userEleName)
}
inline std::string* RetGridScalar2D::mutable_userelename() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.RetGridScalar2D.userEleName)
  return userelename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetGridScalar2D::release_userelename() {
  // @@protoc_insertion_point(field_release:cma.music.pb.RetGridScalar2D.userEleName)
  
  return userelename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetGridScalar2D::set_allocated_userelename(std::string* userelename) {
  if (userelename != nullptr) {
    
  } else {
    
  }
  userelename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userelename);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.RetGridScalar2D.userEleName)
}

// -------------------------------------------------------------------

// StoreGridData

// repeated string attributes = 1;
inline int StoreGridData::attributes_size() const {
  return attributes_.size();
}
inline void StoreGridData::clear_attributes() {
  attributes_.Clear();
}
inline const std::string& StoreGridData::attributes(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreGridData.attributes)
  return attributes_.Get(index);
}
inline std::string* StoreGridData::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:cma.music.pb.StoreGridData.attributes)
  return attributes_.Mutable(index);
}
inline void StoreGridData::set_attributes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreGridData.attributes)
  attributes_.Mutable(index)->assign(value);
}
inline void StoreGridData::set_attributes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreGridData.attributes)
  attributes_.Mutable(index)->assign(std::move(value));
}
inline void StoreGridData::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cma.music.pb.StoreGridData.attributes)
}
inline void StoreGridData::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.StoreGridData.attributes)
}
inline std::string* StoreGridData::add_attributes() {
  // @@protoc_insertion_point(field_add_mutable:cma.music.pb.StoreGridData.attributes)
  return attributes_.Add();
}
inline void StoreGridData::add_attributes(const std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.StoreGridData.attributes)
}
inline void StoreGridData::add_attributes(std::string&& value) {
  attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cma.music.pb.StoreGridData.attributes)
}
inline void StoreGridData::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cma.music.pb.StoreGridData.attributes)
}
inline void StoreGridData::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cma.music.pb.StoreGridData.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StoreGridData::attributes() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.StoreGridData.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StoreGridData::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.StoreGridData.attributes)
  return &attributes_;
}

// int32 pointflag = 2;
inline void StoreGridData::clear_pointflag() {
  pointflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StoreGridData::pointflag() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreGridData.pointflag)
  return pointflag_;
}
inline void StoreGridData::set_pointflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pointflag_ = value;
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreGridData.pointflag)
}

// repeated float Lats = 3;
inline int StoreGridData::lats_size() const {
  return lats_.size();
}
inline void StoreGridData::clear_lats() {
  lats_.Clear();
}
inline float StoreGridData::lats(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreGridData.Lats)
  return lats_.Get(index);
}
inline void StoreGridData::set_lats(int index, float value) {
  lats_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreGridData.Lats)
}
inline void StoreGridData::add_lats(float value) {
  lats_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.StoreGridData.Lats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
StoreGridData::lats() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.StoreGridData.Lats)
  return lats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
StoreGridData::mutable_lats() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.StoreGridData.Lats)
  return &lats_;
}

// repeated float Lons = 4;
inline int StoreGridData::lons_size() const {
  return lons_.size();
}
inline void StoreGridData::clear_lons() {
  lons_.Clear();
}
inline float StoreGridData::lons(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreGridData.Lons)
  return lons_.Get(index);
}
inline void StoreGridData::set_lons(int index, float value) {
  lons_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreGridData.Lons)
}
inline void StoreGridData::add_lons(float value) {
  lons_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.StoreGridData.Lons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
StoreGridData::lons() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.StoreGridData.Lons)
  return lons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
StoreGridData::mutable_lons() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.StoreGridData.Lons)
  return &lons_;
}

// repeated float datas = 5;
inline int StoreGridData::datas_size() const {
  return datas_.size();
}
inline void StoreGridData::clear_datas() {
  datas_.Clear();
}
inline float StoreGridData::datas(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreGridData.datas)
  return datas_.Get(index);
}
inline void StoreGridData::set_datas(int index, float value) {
  datas_.Set(index, value);
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreGridData.datas)
}
inline void StoreGridData::add_datas(float value) {
  datas_.Add(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.StoreGridData.datas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
StoreGridData::datas() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.StoreGridData.datas)
  return datas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
StoreGridData::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.StoreGridData.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// StoreBlockData

// repeated string attributes = 1;
inline int StoreBlockData::attributes_size() const {
  return attributes_.size();
}
inline void StoreBlockData::clear_attributes() {
  attributes_.Clear();
}
inline const std::string& StoreBlockData::attributes(int index) const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreBlockData.attributes)
  return attributes_.Get(index);
}
inline std::string* StoreBlockData::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:cma.music.pb.StoreBlockData.attributes)
  return attributes_.Mutable(index);
}
inline void StoreBlockData::set_attributes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreBlockData.attributes)
  attributes_.Mutable(index)->assign(value);
}
inline void StoreBlockData::set_attributes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreBlockData.attributes)
  attributes_.Mutable(index)->assign(std::move(value));
}
inline void StoreBlockData::set_attributes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cma.music.pb.StoreBlockData.attributes)
}
inline void StoreBlockData::set_attributes(int index, const char* value, size_t size) {
  attributes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.StoreBlockData.attributes)
}
inline std::string* StoreBlockData::add_attributes() {
  // @@protoc_insertion_point(field_add_mutable:cma.music.pb.StoreBlockData.attributes)
  return attributes_.Add();
}
inline void StoreBlockData::add_attributes(const std::string& value) {
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cma.music.pb.StoreBlockData.attributes)
}
inline void StoreBlockData::add_attributes(std::string&& value) {
  attributes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cma.music.pb.StoreBlockData.attributes)
}
inline void StoreBlockData::add_attributes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  attributes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cma.music.pb.StoreBlockData.attributes)
}
inline void StoreBlockData::add_attributes(const char* value, size_t size) {
  attributes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cma.music.pb.StoreBlockData.attributes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StoreBlockData::attributes() const {
  // @@protoc_insertion_point(field_list:cma.music.pb.StoreBlockData.attributes)
  return attributes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StoreBlockData::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:cma.music.pb.StoreBlockData.attributes)
  return &attributes_;
}

// bytes data = 2;
inline void StoreBlockData::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StoreBlockData::data() const {
  // @@protoc_insertion_point(field_get:cma.music.pb.StoreBlockData.data)
  return data_.GetNoArena();
}
inline void StoreBlockData::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cma.music.pb.StoreBlockData.data)
}
inline void StoreBlockData::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cma.music.pb.StoreBlockData.data)
}
inline void StoreBlockData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cma.music.pb.StoreBlockData.data)
}
inline void StoreBlockData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cma.music.pb.StoreBlockData.data)
}
inline std::string* StoreBlockData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cma.music.pb.StoreBlockData.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StoreBlockData::release_data() {
  // @@protoc_insertion_point(field_release:cma.music.pb.StoreBlockData.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StoreBlockData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cma.music.pb.StoreBlockData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace music
}  // namespace cma

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_apiinterface_2eproto
