// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apiinterface.proto

#include "apiinterface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_apiinterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileInfo_apiinterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_apiinterface_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestInfo_apiinterface_2eproto;
namespace cma {
namespace music {
namespace pb {
class RequestInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestInfo> _instance;
} _RequestInfo_default_instance_;
class RetArray2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetArray2D> _instance;
} _RetArray2D_default_instance_;
class RetGridArray2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetGridArray2D> _instance;
} _RetGridArray2D_default_instance_;
class FileInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileInfo> _instance;
} _FileInfo_default_instance_;
class RetFilesInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetFilesInfo> _instance;
} _RetFilesInfo_default_instance_;
class StoreArray2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreArray2D> _instance;
} _StoreArray2D_default_instance_;
class RetDataBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetDataBlock> _instance;
} _RetDataBlock_default_instance_;
class RetGridVector2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetGridVector2D> _instance;
} _RetGridVector2D_default_instance_;
class RetGridScalar2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetGridScalar2D> _instance;
} _RetGridScalar2D_default_instance_;
class StoreGridDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreGridData> _instance;
} _StoreGridData_default_instance_;
class StoreBlockDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreBlockData> _instance;
} _StoreBlockData_default_instance_;
}  // namespace pb
}  // namespace music
}  // namespace cma
static void InitDefaultsscc_info_FileInfo_apiinterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cma::music::pb::_FileInfo_default_instance_;
    new (ptr) ::cma::music::pb::FileInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cma::music::pb::FileInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FileInfo_apiinterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FileInfo_apiinterface_2eproto}, {}};

static void InitDefaultsscc_info_RequestInfo_apiinterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cma::music::pb::_RequestInfo_default_instance_;
    new (ptr) ::cma::music::pb::RequestInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cma::music::pb::RequestInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestInfo_apiinterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RequestInfo_apiinterface_2eproto}, {}};

static void InitDefaultsscc_info_RetArray2D_apiinterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cma::music::pb::_RetArray2D_default_instance_;
    new (ptr) ::cma::music::pb::RetArray2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cma::music::pb::RetArray2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetArray2D_apiinterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RetArray2D_apiinterface_2eproto}, {
      &scc_info_RequestInfo_apiinterface_2eproto.base,}};

static void InitDefaultsscc_info_RetDataBlock_apiinterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cma::music::pb::_RetDataBlock_default_instance_;
    new (ptr) ::cma::music::pb::RetDataBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cma::music::pb::RetDataBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetDataBlock_apiinterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RetDataBlock_apiinterface_2eproto}, {
      &scc_info_RequestInfo_apiinterface_2eproto.base,}};

static void InitDefaultsscc_info_RetFilesInfo_apiinterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cma::music::pb::_RetFilesInfo_default_instance_;
    new (ptr) ::cma::music::pb::RetFilesInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cma::music::pb::RetFilesInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RetFilesInfo_apiinterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RetFilesInfo_apiinterface_2eproto}, {
      &scc_info_FileInfo_apiinterface_2eproto.base,
      &scc_info_RequestInfo_apiinterface_2eproto.base,}};

static void InitDefaultsscc_info_RetGridArray2D_apiinterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cma::music::pb::_RetGridArray2D_default_instance_;
    new (ptr) ::cma::music::pb::RetGridArray2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cma::music::pb::RetGridArray2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetGridArray2D_apiinterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RetGridArray2D_apiinterface_2eproto}, {
      &scc_info_RequestInfo_apiinterface_2eproto.base,}};

static void InitDefaultsscc_info_RetGridScalar2D_apiinterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cma::music::pb::_RetGridScalar2D_default_instance_;
    new (ptr) ::cma::music::pb::RetGridScalar2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cma::music::pb::RetGridScalar2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetGridScalar2D_apiinterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RetGridScalar2D_apiinterface_2eproto}, {
      &scc_info_RequestInfo_apiinterface_2eproto.base,}};

static void InitDefaultsscc_info_RetGridVector2D_apiinterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cma::music::pb::_RetGridVector2D_default_instance_;
    new (ptr) ::cma::music::pb::RetGridVector2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cma::music::pb::RetGridVector2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RetGridVector2D_apiinterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RetGridVector2D_apiinterface_2eproto}, {
      &scc_info_RequestInfo_apiinterface_2eproto.base,}};

static void InitDefaultsscc_info_StoreArray2D_apiinterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cma::music::pb::_StoreArray2D_default_instance_;
    new (ptr) ::cma::music::pb::StoreArray2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cma::music::pb::StoreArray2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreArray2D_apiinterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StoreArray2D_apiinterface_2eproto}, {}};

static void InitDefaultsscc_info_StoreBlockData_apiinterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cma::music::pb::_StoreBlockData_default_instance_;
    new (ptr) ::cma::music::pb::StoreBlockData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cma::music::pb::StoreBlockData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreBlockData_apiinterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StoreBlockData_apiinterface_2eproto}, {}};

static void InitDefaultsscc_info_StoreGridData_apiinterface_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cma::music::pb::_StoreGridData_default_instance_;
    new (ptr) ::cma::music::pb::StoreGridData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cma::music::pb::StoreGridData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StoreGridData_apiinterface_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StoreGridData_apiinterface_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_apiinterface_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_apiinterface_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_apiinterface_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_apiinterface_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RequestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RequestInfo, errorcode_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RequestInfo, errormessage_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RequestInfo, requestelems_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RequestInfo, requestparams_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RequestInfo, requesttime_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RequestInfo, responsetime_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RequestInfo, rowcount_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RequestInfo, taketime_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RequestInfo, colcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetArray2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetArray2D, data_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetArray2D, request_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetArray2D, elementnames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, data_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, request_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, startlat_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, startlon_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, endlat_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, endlon_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, latcount_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, loncount_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, lonstep_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, latstep_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, lats_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, lons_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, units_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridArray2D, userelename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::FileInfo, filename_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::FileInfo, savepath_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::FileInfo, suffix_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::FileInfo, size_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::FileInfo, fileurl_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::FileInfo, imgbase64_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::FileInfo, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetFilesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetFilesInfo, fileinfos_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetFilesInfo, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreArray2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreArray2D, data_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreArray2D, row_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreArray2D, col_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreArray2D, fileflag_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreArray2D, filenames_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreArray2D, is_backstage_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreArray2D, client_mount_path_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreArray2D, server_mount_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetDataBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetDataBlock, dataname_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetDataBlock, bytearray_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetDataBlock, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, u_datas_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, v_data2_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, request_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, startlat_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, startlon_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, endlat_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, endlon_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, latcount_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, loncount_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, lonstep_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, latstep_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, lats_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, lons_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, u_elename_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridVector2D, v_elename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, datas_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, request_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, startlat_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, startlon_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, endlat_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, endlon_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, latcount_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, loncount_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, lonstep_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, latstep_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, lats_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, lons_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, units_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::RetGridScalar2D, userelename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreGridData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreGridData, attributes_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreGridData, pointflag_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreGridData, lats_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreGridData, lons_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreGridData, datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreBlockData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreBlockData, attributes_),
  PROTOBUF_FIELD_OFFSET(::cma::music::pb::StoreBlockData, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cma::music::pb::RequestInfo)},
  { 14, -1, sizeof(::cma::music::pb::RetArray2D)},
  { 22, -1, sizeof(::cma::music::pb::RetGridArray2D)},
  { 41, -1, sizeof(::cma::music::pb::FileInfo)},
  { 53, -1, sizeof(::cma::music::pb::RetFilesInfo)},
  { 60, -1, sizeof(::cma::music::pb::StoreArray2D)},
  { 73, -1, sizeof(::cma::music::pb::RetDataBlock)},
  { 81, -1, sizeof(::cma::music::pb::RetGridVector2D)},
  { 101, -1, sizeof(::cma::music::pb::RetGridScalar2D)},
  { 120, -1, sizeof(::cma::music::pb::StoreGridData)},
  { 130, -1, sizeof(::cma::music::pb::StoreBlockData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cma::music::pb::_RequestInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cma::music::pb::_RetArray2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cma::music::pb::_RetGridArray2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cma::music::pb::_FileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cma::music::pb::_RetFilesInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cma::music::pb::_StoreArray2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cma::music::pb::_RetDataBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cma::music::pb::_RetGridVector2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cma::music::pb::_RetGridScalar2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cma::music::pb::_StoreGridData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cma::music::pb::_StoreBlockData_default_instance_),
};

const char descriptor_table_protodef_apiinterface_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022apiinterface.proto\022\014cma.music.pb\"\304\001\n\013R"
  "equestInfo\022\021\n\terrorCode\030\001 \001(\005\022\024\n\014errorMe"
  "ssage\030\002 \001(\t\022\024\n\014requestElems\030\003 \001(\t\022\025\n\rreq"
  "uestParams\030\004 \001(\t\022\023\n\013requestTime\030\005 \001(\t\022\024\n"
  "\014responseTime\030\006 \001(\t\022\020\n\010rowCount\030\007 \001(\005\022\020\n"
  "\010takeTime\030\010 \001(\005\022\020\n\010colCount\030\t \001(\005\"\\\n\nRet"
  "Array2D\022\014\n\004data\030\001 \003(\t\022*\n\007request\030\002 \001(\0132\031"
  ".cma.music.pb.RequestInfo\022\024\n\014elementName"
  "s\030\003 \003(\t\"\224\002\n\016RetGridArray2D\022\014\n\004data\030\001 \003(\002"
  "\022*\n\007request\030\002 \001(\0132\031.cma.music.pb.Request"
  "Info\022\020\n\010startLat\030\003 \001(\002\022\020\n\010startLon\030\004 \001(\002"
  "\022\016\n\006endLat\030\005 \001(\002\022\016\n\006endLon\030\006 \001(\002\022\020\n\010latC"
  "ount\030\007 \001(\005\022\020\n\010lonCount\030\010 \001(\005\022\017\n\007lonStep\030"
  "\t \001(\002\022\017\n\007latStep\030\n \001(\002\022\014\n\004lats\030\013 \003(\002\022\014\n\004"
  "lons\030\014 \003(\002\022\r\n\005units\030\r \001(\t\022\023\n\013userEleName"
  "\030\016 \001(\t\"\204\001\n\010FileInfo\022\020\n\010fileName\030\001 \001(\t\022\020\n"
  "\010savePath\030\002 \001(\t\022\016\n\006suffix\030\003 \001(\t\022\014\n\004size\030"
  "\004 \001(\t\022\017\n\007fileUrl\030\005 \001(\t\022\021\n\timgBase64\030\006 \001("
  "\t\022\022\n\nattributes\030\007 \003(\t\"e\n\014RetFilesInfo\022)\n"
  "\tfileInfos\030\001 \003(\0132\026.cma.music.pb.FileInfo"
  "\022*\n\007request\030\002 \001(\0132\031.cma.music.pb.Request"
  "Info\"\247\001\n\014StoreArray2D\022\014\n\004data\030\001 \003(\t\022\013\n\003r"
  "ow\030\002 \001(\005\022\013\n\003col\030\003 \001(\005\022\020\n\010fileflag\030\004 \001(\005\022"
  "\021\n\tfilenames\030\005 \003(\t\022\024\n\014is_backstage\030\006 \001(\005"
  "\022\031\n\021client_mount_path\030\007 \001(\t\022\031\n\021server_mo"
  "unt_path\030\010 \001(\t\"_\n\014RetDataBlock\022\020\n\010dataNa"
  "me\030\001 \001(\t\022\021\n\tbyteArray\030\002 \001(\014\022*\n\007request\030\003"
  " \001(\0132\031.cma.music.pb.RequestInfo\"\253\002\n\017RetG"
  "ridVector2D\022\017\n\007u_datas\030\001 \003(\002\022\017\n\007v_data2\030"
  "\002 \003(\002\022*\n\007request\030\003 \001(\0132\031.cma.music.pb.Re"
  "questInfo\022\020\n\010startLat\030\004 \001(\002\022\020\n\010startLon\030"
  "\005 \001(\002\022\016\n\006endLat\030\006 \001(\002\022\016\n\006endLon\030\007 \001(\002\022\020\n"
  "\010latCount\030\010 \001(\005\022\020\n\010lonCount\030\t \001(\005\022\017\n\007lon"
  "Step\030\n \001(\002\022\017\n\007latStep\030\013 \001(\002\022\014\n\004lats\030\014 \003("
  "\002\022\014\n\004lons\030\r \003(\002\022\021\n\tu_EleName\030\016 \001(\t\022\021\n\tv_"
  "EleName\030\017 \001(\t\"\226\002\n\017RetGridScalar2D\022\r\n\005dat"
  "as\030\001 \003(\002\022*\n\007request\030\002 \001(\0132\031.cma.music.pb"
  ".RequestInfo\022\020\n\010startLat\030\003 \001(\002\022\020\n\010startL"
  "on\030\004 \001(\002\022\016\n\006endLat\030\005 \001(\002\022\016\n\006endLon\030\006 \001(\002"
  "\022\020\n\010latCount\030\007 \001(\005\022\020\n\010lonCount\030\010 \001(\005\022\017\n\007"
  "lonStep\030\t \001(\002\022\017\n\007latStep\030\n \001(\002\022\014\n\004lats\030\013"
  " \003(\002\022\014\n\004lons\030\014 \003(\002\022\r\n\005units\030\r \001(\t\022\023\n\013use"
  "rEleName\030\016 \001(\t\"a\n\rStoreGridData\022\022\n\nattri"
  "butes\030\001 \003(\t\022\021\n\tpointflag\030\002 \001(\005\022\014\n\004Lats\030\003"
  " \003(\002\022\014\n\004Lons\030\004 \003(\002\022\r\n\005datas\030\005 \003(\002\"2\n\016Sto"
  "reBlockData\022\022\n\nattributes\030\001 \003(\t\022\014\n\004data\030"
  "\002 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_apiinterface_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_apiinterface_2eproto_sccs[11] = {
  &scc_info_FileInfo_apiinterface_2eproto.base,
  &scc_info_RequestInfo_apiinterface_2eproto.base,
  &scc_info_RetArray2D_apiinterface_2eproto.base,
  &scc_info_RetDataBlock_apiinterface_2eproto.base,
  &scc_info_RetFilesInfo_apiinterface_2eproto.base,
  &scc_info_RetGridArray2D_apiinterface_2eproto.base,
  &scc_info_RetGridScalar2D_apiinterface_2eproto.base,
  &scc_info_RetGridVector2D_apiinterface_2eproto.base,
  &scc_info_StoreArray2D_apiinterface_2eproto.base,
  &scc_info_StoreBlockData_apiinterface_2eproto.base,
  &scc_info_StoreGridData_apiinterface_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_apiinterface_2eproto_once;
static bool descriptor_table_apiinterface_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_apiinterface_2eproto = {
  &descriptor_table_apiinterface_2eproto_initialized, descriptor_table_protodef_apiinterface_2eproto, "apiinterface.proto", 1853,
  &descriptor_table_apiinterface_2eproto_once, descriptor_table_apiinterface_2eproto_sccs, descriptor_table_apiinterface_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_apiinterface_2eproto::offsets,
  file_level_metadata_apiinterface_2eproto, 11, file_level_enum_descriptors_apiinterface_2eproto, file_level_service_descriptors_apiinterface_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_apiinterface_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_apiinterface_2eproto), true);
namespace cma {
namespace music {
namespace pb {

// ===================================================================

void RequestInfo::InitAsDefaultInstance() {
}
class RequestInfo::_Internal {
 public:
};

RequestInfo::RequestInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cma.music.pb.RequestInfo)
}
RequestInfo::RequestInfo(const RequestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.errormessage().empty()) {
    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  requestelems_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.requestelems().empty()) {
    requestelems_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requestelems_);
  }
  requestparams_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.requestparams().empty()) {
    requestparams_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requestparams_);
  }
  requesttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.requesttime().empty()) {
    requesttime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requesttime_);
  }
  responsetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.responsetime().empty()) {
    responsetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.responsetime_);
  }
  ::memcpy(&errorcode_, &from.errorcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&colcount_) -
    reinterpret_cast<char*>(&errorcode_)) + sizeof(colcount_));
  // @@protoc_insertion_point(copy_constructor:cma.music.pb.RequestInfo)
}

void RequestInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestInfo_apiinterface_2eproto.base);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestelems_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestparams_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  responsetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&errorcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colcount_) -
      reinterpret_cast<char*>(&errorcode_)) + sizeof(colcount_));
}

RequestInfo::~RequestInfo() {
  // @@protoc_insertion_point(destructor:cma.music.pb.RequestInfo)
  SharedDtor();
}

void RequestInfo::SharedDtor() {
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestelems_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestparams_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  responsetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestInfo& RequestInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestInfo_apiinterface_2eproto.base);
  return *internal_default_instance();
}


void RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cma.music.pb.RequestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestelems_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestparams_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requesttime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  responsetime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&errorcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colcount_) -
      reinterpret_cast<char*>(&errorcode_)) + sizeof(colcount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_errormessage(), ptr, ctx, "cma.music.pb.RequestInfo.errorMessage");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string requestElems = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_requestelems(), ptr, ctx, "cma.music.pb.RequestInfo.requestElems");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string requestParams = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_requestparams(), ptr, ctx, "cma.music.pb.RequestInfo.requestParams");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string requestTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_requesttime(), ptr, ctx, "cma.music.pb.RequestInfo.requestTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string responseTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_responsetime(), ptr, ctx, "cma.music.pb.RequestInfo.responseTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rowCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rowcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 takeTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          taketime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 colCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          colcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cma.music.pb.RequestInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 errorCode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errorMessage = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->errormessage().data(), static_cast<int>(this->errormessage().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RequestInfo.errorMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string requestElems = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_requestelems()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->requestelems().data(), static_cast<int>(this->requestelems().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RequestInfo.requestElems"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string requestParams = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_requestparams()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->requestparams().data(), static_cast<int>(this->requestparams().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RequestInfo.requestParams"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string requestTime = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_requesttime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->requesttime().data(), static_cast<int>(this->requesttime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RequestInfo.requestTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string responseTime = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_responsetime()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->responsetime().data(), static_cast<int>(this->responsetime().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RequestInfo.responseTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rowCount = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rowcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 takeTime = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &taketime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 colCount = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &colcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cma.music.pb.RequestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cma.music.pb.RequestInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cma.music.pb.RequestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errorCode = 1;
  if (this->errorcode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RequestInfo.errorMessage");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errormessage(), output);
  }

  // string requestElems = 3;
  if (this->requestelems().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->requestelems().data(), static_cast<int>(this->requestelems().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RequestInfo.requestElems");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->requestelems(), output);
  }

  // string requestParams = 4;
  if (this->requestparams().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->requestparams().data(), static_cast<int>(this->requestparams().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RequestInfo.requestParams");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->requestparams(), output);
  }

  // string requestTime = 5;
  if (this->requesttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->requesttime().data(), static_cast<int>(this->requesttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RequestInfo.requestTime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->requesttime(), output);
  }

  // string responseTime = 6;
  if (this->responsetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->responsetime().data(), static_cast<int>(this->responsetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RequestInfo.responseTime");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->responsetime(), output);
  }

  // int32 rowCount = 7;
  if (this->rowcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->rowcount(), output);
  }

  // int32 takeTime = 8;
  if (this->taketime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->taketime(), output);
  }

  // int32 colCount = 9;
  if (this->colcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->colcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cma.music.pb.RequestInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cma.music.pb.RequestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errorCode = 1;
  if (this->errorcode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RequestInfo.errorMessage");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }

  // string requestElems = 3;
  if (this->requestelems().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->requestelems().data(), static_cast<int>(this->requestelems().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RequestInfo.requestElems");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->requestelems(), target);
  }

  // string requestParams = 4;
  if (this->requestparams().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->requestparams().data(), static_cast<int>(this->requestparams().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RequestInfo.requestParams");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->requestparams(), target);
  }

  // string requestTime = 5;
  if (this->requesttime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->requesttime().data(), static_cast<int>(this->requesttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RequestInfo.requestTime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->requesttime(), target);
  }

  // string responseTime = 6;
  if (this->responsetime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->responsetime().data(), static_cast<int>(this->responsetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RequestInfo.responseTime");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->responsetime(), target);
  }

  // int32 rowCount = 7;
  if (this->rowcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->rowcount(), target);
  }

  // int32 takeTime = 8;
  if (this->taketime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->taketime(), target);
  }

  // int32 colCount = 9;
  if (this->colcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->colcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cma.music.pb.RequestInfo)
  return target;
}

size_t RequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cma.music.pb.RequestInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->errormessage());
  }

  // string requestElems = 3;
  if (this->requestelems().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->requestelems());
  }

  // string requestParams = 4;
  if (this->requestparams().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->requestparams());
  }

  // string requestTime = 5;
  if (this->requesttime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->requesttime());
  }

  // string responseTime = 6;
  if (this->responsetime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->responsetime());
  }

  // int32 errorCode = 1;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // int32 rowCount = 7;
  if (this->rowcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rowcount());
  }

  // int32 takeTime = 8;
  if (this->taketime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->taketime());
  }

  // int32 colCount = 9;
  if (this->colcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->colcount());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cma.music.pb.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cma.music.pb.RequestInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cma.music.pb.RequestInfo)
    MergeFrom(*source);
  }
}

void RequestInfo::MergeFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cma.music.pb.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.requestelems().size() > 0) {

    requestelems_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requestelems_);
  }
  if (from.requestparams().size() > 0) {

    requestparams_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requestparams_);
  }
  if (from.requesttime().size() > 0) {

    requesttime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requesttime_);
  }
  if (from.responsetime().size() > 0) {

    responsetime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.responsetime_);
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.rowcount() != 0) {
    set_rowcount(from.rowcount());
  }
  if (from.taketime() != 0) {
    set_taketime(from.taketime());
  }
  if (from.colcount() != 0) {
    set_colcount(from.colcount());
  }
}

void RequestInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cma.music.pb.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInfo::CopyFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cma.music.pb.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInfo::IsInitialized() const {
  return true;
}

void RequestInfo::InternalSwap(RequestInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errormessage_.Swap(&other->errormessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  requestelems_.Swap(&other->requestelems_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  requestparams_.Swap(&other->requestparams_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  requesttime_.Swap(&other->requesttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  responsetime_.Swap(&other->responsetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
  swap(rowcount_, other->rowcount_);
  swap(taketime_, other->taketime_);
  swap(colcount_, other->colcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetArray2D::InitAsDefaultInstance() {
  ::cma::music::pb::_RetArray2D_default_instance_._instance.get_mutable()->request_ = const_cast< ::cma::music::pb::RequestInfo*>(
      ::cma::music::pb::RequestInfo::internal_default_instance());
}
class RetArray2D::_Internal {
 public:
  static const ::cma::music::pb::RequestInfo& request(const RetArray2D* msg);
};

const ::cma::music::pb::RequestInfo&
RetArray2D::_Internal::request(const RetArray2D* msg) {
  return *msg->request_;
}
RetArray2D::RetArray2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cma.music.pb.RetArray2D)
}
RetArray2D::RetArray2D(const RetArray2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_),
      elementnames_(from.elementnames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request()) {
    request_ = new ::cma::music::pb::RequestInfo(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cma.music.pb.RetArray2D)
}

void RetArray2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetArray2D_apiinterface_2eproto.base);
  request_ = nullptr;
}

RetArray2D::~RetArray2D() {
  // @@protoc_insertion_point(destructor:cma.music.pb.RetArray2D)
  SharedDtor();
}

void RetArray2D::SharedDtor() {
  if (this != internal_default_instance()) delete request_;
}

void RetArray2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetArray2D& RetArray2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetArray2D_apiinterface_2eproto.base);
  return *internal_default_instance();
}


void RetArray2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cma.music.pb.RetArray2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  elementnames_.Clear();
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetArray2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_data(), ptr, ctx, "cma.music.pb.RetArray2D.data");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .cma.music.pb.RequestInfo request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string elementNames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_elementnames(), ptr, ctx, "cma.music.pb.RetArray2D.elementNames");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetArray2D::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cma.music.pb.RetArray2D)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_data()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->data(this->data_size() - 1).data(),
            static_cast<int>(this->data(this->data_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RetArray2D.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cma.music.pb.RequestInfo request = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string elementNames = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_elementnames()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->elementnames(this->elementnames_size() - 1).data(),
            static_cast<int>(this->elementnames(this->elementnames_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RetArray2D.elementNames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cma.music.pb.RetArray2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cma.music.pb.RetArray2D)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetArray2D::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cma.music.pb.RetArray2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->data(i).data(), static_cast<int>(this->data(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetArray2D.data");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->data(i), output);
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::request(this), output);
  }

  // repeated string elementNames = 3;
  for (int i = 0, n = this->elementnames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->elementnames(i).data(), static_cast<int>(this->elementnames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetArray2D.elementNames");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->elementnames(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cma.music.pb.RetArray2D)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetArray2D::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cma.music.pb.RetArray2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->data(i).data(), static_cast<int>(this->data(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetArray2D.data");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->data(i), target);
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::request(this), target);
  }

  // repeated string elementNames = 3;
  for (int i = 0, n = this->elementnames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->elementnames(i).data(), static_cast<int>(this->elementnames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetArray2D.elementNames");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->elementnames(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cma.music.pb.RetArray2D)
  return target;
}

size_t RetArray2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cma.music.pb.RetArray2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->data_size());
  for (int i = 0, n = this->data_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->data(i));
  }

  // repeated string elementNames = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->elementnames_size());
  for (int i = 0, n = this->elementnames_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->elementnames(i));
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetArray2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cma.music.pb.RetArray2D)
  GOOGLE_DCHECK_NE(&from, this);
  const RetArray2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetArray2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cma.music.pb.RetArray2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cma.music.pb.RetArray2D)
    MergeFrom(*source);
  }
}

void RetArray2D::MergeFrom(const RetArray2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cma.music.pb.RetArray2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  elementnames_.MergeFrom(from.elementnames_);
  if (from.has_request()) {
    mutable_request()->::cma::music::pb::RequestInfo::MergeFrom(from.request());
  }
}

void RetArray2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cma.music.pb.RetArray2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetArray2D::CopyFrom(const RetArray2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cma.music.pb.RetArray2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetArray2D::IsInitialized() const {
  return true;
}

void RetArray2D::InternalSwap(RetArray2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(CastToBase(&other->data_));
  elementnames_.InternalSwap(CastToBase(&other->elementnames_));
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetArray2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetGridArray2D::InitAsDefaultInstance() {
  ::cma::music::pb::_RetGridArray2D_default_instance_._instance.get_mutable()->request_ = const_cast< ::cma::music::pb::RequestInfo*>(
      ::cma::music::pb::RequestInfo::internal_default_instance());
}
class RetGridArray2D::_Internal {
 public:
  static const ::cma::music::pb::RequestInfo& request(const RetGridArray2D* msg);
};

const ::cma::music::pb::RequestInfo&
RetGridArray2D::_Internal::request(const RetGridArray2D* msg) {
  return *msg->request_;
}
RetGridArray2D::RetGridArray2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cma.music.pb.RetGridArray2D)
}
RetGridArray2D::RetGridArray2D(const RetGridArray2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_),
      lats_(from.lats_),
      lons_(from.lons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.units().empty()) {
    units_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  userelename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.userelename().empty()) {
    userelename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userelename_);
  }
  if (from.has_request()) {
    request_ = new ::cma::music::pb::RequestInfo(*from.request_);
  } else {
    request_ = nullptr;
  }
  ::memcpy(&startlat_, &from.startlat_,
    static_cast<size_t>(reinterpret_cast<char*>(&latstep_) -
    reinterpret_cast<char*>(&startlat_)) + sizeof(latstep_));
  // @@protoc_insertion_point(copy_constructor:cma.music.pb.RetGridArray2D)
}

void RetGridArray2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetGridArray2D_apiinterface_2eproto.base);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userelename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latstep_) -
      reinterpret_cast<char*>(&request_)) + sizeof(latstep_));
}

RetGridArray2D::~RetGridArray2D() {
  // @@protoc_insertion_point(destructor:cma.music.pb.RetGridArray2D)
  SharedDtor();
}

void RetGridArray2D::SharedDtor() {
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userelename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
}

void RetGridArray2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetGridArray2D& RetGridArray2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetGridArray2D_apiinterface_2eproto.base);
  return *internal_default_instance();
}


void RetGridArray2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cma.music.pb.RetGridArray2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  lats_.Clear();
  lons_.Clear();
  units_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userelename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  ::memset(&startlat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latstep_) -
      reinterpret_cast<char*>(&startlat_)) + sizeof(latstep_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetGridArray2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .cma.music.pb.RequestInfo request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float startLat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          startlat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float startLon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          startlon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float endLat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          endlat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float endLon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          endlon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 latCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          latcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lonCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          loncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lonStep = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          lonstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latStep = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          latstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float lats = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_lats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          add_lats(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float lons = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_lons(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          add_lons(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string units = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_units(), ptr, ctx, "cma.music.pb.RetGridArray2D.units");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userEleName = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_userelename(), ptr, ctx, "cma.music.pb.RetGridArray2D.userEleName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetGridArray2D::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cma.music.pb.RetGridArray2D)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cma.music.pb.RequestInfo request = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float startLat = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startlat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float startLon = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startlon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float endLat = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endlat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float endLon = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endlon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 latCount = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lonCount = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &loncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lonStep = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lonstep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latStep = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latstep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float lats = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lats())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_lats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float lons = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lons())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_lons())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string units = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->units().data(), static_cast<int>(this->units().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RetGridArray2D.units"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userEleName = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_userelename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->userelename().data(), static_cast<int>(this->userelename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RetGridArray2D.userEleName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cma.music.pb.RetGridArray2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cma.music.pb.RetGridArray2D)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetGridArray2D::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cma.music.pb.RetGridArray2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->data_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->data().data(), this->data_size(), output);
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::request(this), output);
  }

  // float startLat = 3;
  if (!(this->startlat() <= 0 && this->startlat() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->startlat(), output);
  }

  // float startLon = 4;
  if (!(this->startlon() <= 0 && this->startlon() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->startlon(), output);
  }

  // float endLat = 5;
  if (!(this->endlat() <= 0 && this->endlat() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->endlat(), output);
  }

  // float endLon = 6;
  if (!(this->endlon() <= 0 && this->endlon() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->endlon(), output);
  }

  // int32 latCount = 7;
  if (this->latcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->latcount(), output);
  }

  // int32 lonCount = 8;
  if (this->loncount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->loncount(), output);
  }

  // float lonStep = 9;
  if (!(this->lonstep() <= 0 && this->lonstep() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->lonstep(), output);
  }

  // float latStep = 10;
  if (!(this->latstep() <= 0 && this->latstep() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->latstep(), output);
  }

  // repeated float lats = 11;
  if (this->lats_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lats_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->lats().data(), this->lats_size(), output);
  }

  // repeated float lons = 12;
  if (this->lons_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lons_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->lons().data(), this->lons_size(), output);
  }

  // string units = 13;
  if (this->units().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->units().data(), static_cast<int>(this->units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridArray2D.units");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->units(), output);
  }

  // string userEleName = 14;
  if (this->userelename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->userelename().data(), static_cast<int>(this->userelename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridArray2D.userEleName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->userelename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cma.music.pb.RetGridArray2D)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetGridArray2D::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cma.music.pb.RetGridArray2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data = 1;
  if (this->data_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _data_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data_, target);
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::request(this), target);
  }

  // float startLat = 3;
  if (!(this->startlat() <= 0 && this->startlat() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->startlat(), target);
  }

  // float startLon = 4;
  if (!(this->startlon() <= 0 && this->startlon() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->startlon(), target);
  }

  // float endLat = 5;
  if (!(this->endlat() <= 0 && this->endlat() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->endlat(), target);
  }

  // float endLon = 6;
  if (!(this->endlon() <= 0 && this->endlon() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->endlon(), target);
  }

  // int32 latCount = 7;
  if (this->latcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->latcount(), target);
  }

  // int32 lonCount = 8;
  if (this->loncount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->loncount(), target);
  }

  // float lonStep = 9;
  if (!(this->lonstep() <= 0 && this->lonstep() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->lonstep(), target);
  }

  // float latStep = 10;
  if (!(this->latstep() <= 0 && this->latstep() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->latstep(), target);
  }

  // repeated float lats = 11;
  if (this->lats_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      11,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _lats_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->lats_, target);
  }

  // repeated float lons = 12;
  if (this->lons_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _lons_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->lons_, target);
  }

  // string units = 13;
  if (this->units().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->units().data(), static_cast<int>(this->units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridArray2D.units");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->units(), target);
  }

  // string userEleName = 14;
  if (this->userelename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->userelename().data(), static_cast<int>(this->userelename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridArray2D.userEleName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->userelename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cma.music.pb.RetGridArray2D)
  return target;
}

size_t RetGridArray2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cma.music.pb.RetGridArray2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float lats = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->lats_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float lons = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->lons_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lons_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string units = 13;
  if (this->units().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->units());
  }

  // string userEleName = 14;
  if (this->userelename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->userelename());
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // float startLat = 3;
  if (!(this->startlat() <= 0 && this->startlat() >= 0)) {
    total_size += 1 + 4;
  }

  // float startLon = 4;
  if (!(this->startlon() <= 0 && this->startlon() >= 0)) {
    total_size += 1 + 4;
  }

  // float endLat = 5;
  if (!(this->endlat() <= 0 && this->endlat() >= 0)) {
    total_size += 1 + 4;
  }

  // float endLon = 6;
  if (!(this->endlon() <= 0 && this->endlon() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 latCount = 7;
  if (this->latcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->latcount());
  }

  // int32 lonCount = 8;
  if (this->loncount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->loncount());
  }

  // float lonStep = 9;
  if (!(this->lonstep() <= 0 && this->lonstep() >= 0)) {
    total_size += 1 + 4;
  }

  // float latStep = 10;
  if (!(this->latstep() <= 0 && this->latstep() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetGridArray2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cma.music.pb.RetGridArray2D)
  GOOGLE_DCHECK_NE(&from, this);
  const RetGridArray2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetGridArray2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cma.music.pb.RetGridArray2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cma.music.pb.RetGridArray2D)
    MergeFrom(*source);
  }
}

void RetGridArray2D::MergeFrom(const RetGridArray2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cma.music.pb.RetGridArray2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  lats_.MergeFrom(from.lats_);
  lons_.MergeFrom(from.lons_);
  if (from.units().size() > 0) {

    units_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  if (from.userelename().size() > 0) {

    userelename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userelename_);
  }
  if (from.has_request()) {
    mutable_request()->::cma::music::pb::RequestInfo::MergeFrom(from.request());
  }
  if (!(from.startlat() <= 0 && from.startlat() >= 0)) {
    set_startlat(from.startlat());
  }
  if (!(from.startlon() <= 0 && from.startlon() >= 0)) {
    set_startlon(from.startlon());
  }
  if (!(from.endlat() <= 0 && from.endlat() >= 0)) {
    set_endlat(from.endlat());
  }
  if (!(from.endlon() <= 0 && from.endlon() >= 0)) {
    set_endlon(from.endlon());
  }
  if (from.latcount() != 0) {
    set_latcount(from.latcount());
  }
  if (from.loncount() != 0) {
    set_loncount(from.loncount());
  }
  if (!(from.lonstep() <= 0 && from.lonstep() >= 0)) {
    set_lonstep(from.lonstep());
  }
  if (!(from.latstep() <= 0 && from.latstep() >= 0)) {
    set_latstep(from.latstep());
  }
}

void RetGridArray2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cma.music.pb.RetGridArray2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGridArray2D::CopyFrom(const RetGridArray2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cma.music.pb.RetGridArray2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGridArray2D::IsInitialized() const {
  return true;
}

void RetGridArray2D::InternalSwap(RetGridArray2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  lats_.InternalSwap(&other->lats_);
  lons_.InternalSwap(&other->lons_);
  units_.Swap(&other->units_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userelename_.Swap(&other->userelename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_, other->request_);
  swap(startlat_, other->startlat_);
  swap(startlon_, other->startlon_);
  swap(endlat_, other->endlat_);
  swap(endlon_, other->endlon_);
  swap(latcount_, other->latcount_);
  swap(loncount_, other->loncount_);
  swap(lonstep_, other->lonstep_);
  swap(latstep_, other->latstep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetGridArray2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileInfo::InitAsDefaultInstance() {
}
class FileInfo::_Internal {
 public:
};

FileInfo::FileInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cma.music.pb.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  savepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.savepath().empty()) {
    savepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.savepath_);
  }
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.suffix().empty()) {
    suffix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.size().empty()) {
    size_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.size_);
  }
  fileurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.fileurl().empty()) {
    fileurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fileurl_);
  }
  imgbase64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.imgbase64().empty()) {
    imgbase64_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imgbase64_);
  }
  // @@protoc_insertion_point(copy_constructor:cma.music.pb.FileInfo)
}

void FileInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileInfo_apiinterface_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  savepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fileurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imgbase64_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:cma.music.pb.FileInfo)
  SharedDtor();
}

void FileInfo::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  savepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fileurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imgbase64_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileInfo& FileInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileInfo_apiinterface_2eproto.base);
  return *internal_default_instance();
}


void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cma.music.pb.FileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  savepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suffix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fileurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imgbase64_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fileName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_filename(), ptr, ctx, "cma.music.pb.FileInfo.fileName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string savePath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_savepath(), ptr, ctx, "cma.music.pb.FileInfo.savePath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string suffix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_suffix(), ptr, ctx, "cma.music.pb.FileInfo.suffix");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_size(), ptr, ctx, "cma.music.pb.FileInfo.size");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fileUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fileurl(), ptr, ctx, "cma.music.pb.FileInfo.fileUrl");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string imgBase64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_imgbase64(), ptr, ctx, "cma.music.pb.FileInfo.imgBase64");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string attributes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_attributes(), ptr, ctx, "cma.music.pb.FileInfo.attributes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cma.music.pb.FileInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string fileName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.FileInfo.fileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string savePath = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_savepath()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->savepath().data(), static_cast<int>(this->savepath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.FileInfo.savePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string suffix = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_suffix()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->suffix().data(), static_cast<int>(this->suffix().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.FileInfo.suffix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_size()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->size().data(), static_cast<int>(this->size().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.FileInfo.size"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fileUrl = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fileurl()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fileurl().data(), static_cast<int>(this->fileurl().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.FileInfo.fileUrl"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string imgBase64 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_imgbase64()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->imgbase64().data(), static_cast<int>(this->imgbase64().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.FileInfo.imgBase64"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string attributes = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_attributes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->attributes(this->attributes_size() - 1).data(),
            static_cast<int>(this->attributes(this->attributes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.FileInfo.attributes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cma.music.pb.FileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cma.music.pb.FileInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cma.music.pb.FileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.fileName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // string savePath = 2;
  if (this->savepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->savepath().data(), static_cast<int>(this->savepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.savePath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->savepath(), output);
  }

  // string suffix = 3;
  if (this->suffix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->suffix().data(), static_cast<int>(this->suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.suffix");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->suffix(), output);
  }

  // string size = 4;
  if (this->size().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->size().data(), static_cast<int>(this->size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.size");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->size(), output);
  }

  // string fileUrl = 5;
  if (this->fileurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fileurl().data(), static_cast<int>(this->fileurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.fileUrl");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fileurl(), output);
  }

  // string imgBase64 = 6;
  if (this->imgbase64().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->imgbase64().data(), static_cast<int>(this->imgbase64().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.imgBase64");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->imgbase64(), output);
  }

  // repeated string attributes = 7;
  for (int i = 0, n = this->attributes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->attributes(i).data(), static_cast<int>(this->attributes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.attributes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->attributes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cma.music.pb.FileInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* FileInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cma.music.pb.FileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.fileName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // string savePath = 2;
  if (this->savepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->savepath().data(), static_cast<int>(this->savepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.savePath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->savepath(), target);
  }

  // string suffix = 3;
  if (this->suffix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->suffix().data(), static_cast<int>(this->suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.suffix");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->suffix(), target);
  }

  // string size = 4;
  if (this->size().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->size().data(), static_cast<int>(this->size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.size");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->size(), target);
  }

  // string fileUrl = 5;
  if (this->fileurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fileurl().data(), static_cast<int>(this->fileurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.fileUrl");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->fileurl(), target);
  }

  // string imgBase64 = 6;
  if (this->imgbase64().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->imgbase64().data(), static_cast<int>(this->imgbase64().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.imgBase64");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->imgbase64(), target);
  }

  // repeated string attributes = 7;
  for (int i = 0, n = this->attributes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->attributes(i).data(), static_cast<int>(this->attributes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.FileInfo.attributes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(7, this->attributes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cma.music.pb.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cma.music.pb.FileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attributes = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->attributes_size());
  for (int i = 0, n = this->attributes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->attributes(i));
  }

  // string fileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // string savePath = 2;
  if (this->savepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->savepath());
  }

  // string suffix = 3;
  if (this->suffix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->suffix());
  }

  // string size = 4;
  if (this->size().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->size());
  }

  // string fileUrl = 5;
  if (this->fileurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fileurl());
  }

  // string imgBase64 = 6;
  if (this->imgbase64().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->imgbase64());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cma.music.pb.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cma.music.pb.FileInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cma.music.pb.FileInfo)
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cma.music.pb.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.savepath().size() > 0) {

    savepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.savepath_);
  }
  if (from.suffix().size() > 0) {

    suffix_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.suffix_);
  }
  if (from.size().size() > 0) {

    size_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.size_);
  }
  if (from.fileurl().size() > 0) {

    fileurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fileurl_);
  }
  if (from.imgbase64().size() > 0) {

    imgbase64_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.imgbase64_);
  }
}

void FileInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cma.music.pb.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cma.music.pb.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.InternalSwap(CastToBase(&other->attributes_));
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  savepath_.Swap(&other->savepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  suffix_.Swap(&other->suffix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  size_.Swap(&other->size_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fileurl_.Swap(&other->fileurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  imgbase64_.Swap(&other->imgbase64_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetFilesInfo::InitAsDefaultInstance() {
  ::cma::music::pb::_RetFilesInfo_default_instance_._instance.get_mutable()->request_ = const_cast< ::cma::music::pb::RequestInfo*>(
      ::cma::music::pb::RequestInfo::internal_default_instance());
}
class RetFilesInfo::_Internal {
 public:
  static const ::cma::music::pb::RequestInfo& request(const RetFilesInfo* msg);
};

const ::cma::music::pb::RequestInfo&
RetFilesInfo::_Internal::request(const RetFilesInfo* msg) {
  return *msg->request_;
}
RetFilesInfo::RetFilesInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cma.music.pb.RetFilesInfo)
}
RetFilesInfo::RetFilesInfo(const RetFilesInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fileinfos_(from.fileinfos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request()) {
    request_ = new ::cma::music::pb::RequestInfo(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cma.music.pb.RetFilesInfo)
}

void RetFilesInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetFilesInfo_apiinterface_2eproto.base);
  request_ = nullptr;
}

RetFilesInfo::~RetFilesInfo() {
  // @@protoc_insertion_point(destructor:cma.music.pb.RetFilesInfo)
  SharedDtor();
}

void RetFilesInfo::SharedDtor() {
  if (this != internal_default_instance()) delete request_;
}

void RetFilesInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetFilesInfo& RetFilesInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetFilesInfo_apiinterface_2eproto.base);
  return *internal_default_instance();
}


void RetFilesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cma.music.pb.RetFilesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fileinfos_.Clear();
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetFilesInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cma.music.pb.FileInfo fileInfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_fileinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .cma.music.pb.RequestInfo request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetFilesInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cma.music.pb.RetFilesInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cma.music.pb.FileInfo fileInfos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_fileinfos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cma.music.pb.RequestInfo request = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cma.music.pb.RetFilesInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cma.music.pb.RetFilesInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetFilesInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cma.music.pb.RetFilesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cma.music.pb.FileInfo fileInfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fileinfos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->fileinfos(static_cast<int>(i)),
      output);
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::request(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cma.music.pb.RetFilesInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetFilesInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cma.music.pb.RetFilesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cma.music.pb.FileInfo fileInfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fileinfos_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->fileinfos(static_cast<int>(i)), target);
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::request(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cma.music.pb.RetFilesInfo)
  return target;
}

size_t RetFilesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cma.music.pb.RetFilesInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cma.music.pb.FileInfo fileInfos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fileinfos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->fileinfos(static_cast<int>(i)));
    }
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetFilesInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cma.music.pb.RetFilesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RetFilesInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetFilesInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cma.music.pb.RetFilesInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cma.music.pb.RetFilesInfo)
    MergeFrom(*source);
  }
}

void RetFilesInfo::MergeFrom(const RetFilesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cma.music.pb.RetFilesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fileinfos_.MergeFrom(from.fileinfos_);
  if (from.has_request()) {
    mutable_request()->::cma::music::pb::RequestInfo::MergeFrom(from.request());
  }
}

void RetFilesInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cma.music.pb.RetFilesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetFilesInfo::CopyFrom(const RetFilesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cma.music.pb.RetFilesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetFilesInfo::IsInitialized() const {
  return true;
}

void RetFilesInfo::InternalSwap(RetFilesInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&fileinfos_)->InternalSwap(CastToBase(&other->fileinfos_));
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetFilesInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreArray2D::InitAsDefaultInstance() {
}
class StoreArray2D::_Internal {
 public:
};

StoreArray2D::StoreArray2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cma.music.pb.StoreArray2D)
}
StoreArray2D::StoreArray2D(const StoreArray2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_(from.data_),
      filenames_(from.filenames_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_mount_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.client_mount_path().empty()) {
    client_mount_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_mount_path_);
  }
  server_mount_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.server_mount_path().empty()) {
    server_mount_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_mount_path_);
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_backstage_) -
    reinterpret_cast<char*>(&row_)) + sizeof(is_backstage_));
  // @@protoc_insertion_point(copy_constructor:cma.music.pb.StoreArray2D)
}

void StoreArray2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreArray2D_apiinterface_2eproto.base);
  client_mount_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_mount_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_backstage_) -
      reinterpret_cast<char*>(&row_)) + sizeof(is_backstage_));
}

StoreArray2D::~StoreArray2D() {
  // @@protoc_insertion_point(destructor:cma.music.pb.StoreArray2D)
  SharedDtor();
}

void StoreArray2D::SharedDtor() {
  client_mount_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_mount_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StoreArray2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreArray2D& StoreArray2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreArray2D_apiinterface_2eproto.base);
  return *internal_default_instance();
}


void StoreArray2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cma.music.pb.StoreArray2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  filenames_.Clear();
  client_mount_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_mount_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_backstage_) -
      reinterpret_cast<char*>(&row_)) + sizeof(is_backstage_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreArray2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_data(), ptr, ctx, "cma.music.pb.StoreArray2D.data");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // int32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fileflag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fileflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string filenames = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_filenames(), ptr, ctx, "cma.music.pb.StoreArray2D.filenames");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // int32 is_backstage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_backstage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string client_mount_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_client_mount_path(), ptr, ctx, "cma.music.pb.StoreArray2D.client_mount_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_mount_path = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_server_mount_path(), ptr, ctx, "cma.music.pb.StoreArray2D.server_mount_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreArray2D::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cma.music.pb.StoreArray2D)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_data()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->data(this->data_size() - 1).data(),
            static_cast<int>(this->data(this->data_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.StoreArray2D.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 row = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 col = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fileflag = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fileflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string filenames = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_filenames()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->filenames(this->filenames_size() - 1).data(),
            static_cast<int>(this->filenames(this->filenames_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.StoreArray2D.filenames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 is_backstage = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_backstage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_mount_path = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_client_mount_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->client_mount_path().data(), static_cast<int>(this->client_mount_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.StoreArray2D.client_mount_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_mount_path = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_server_mount_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->server_mount_path().data(), static_cast<int>(this->server_mount_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.StoreArray2D.server_mount_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cma.music.pb.StoreArray2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cma.music.pb.StoreArray2D)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreArray2D::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cma.music.pb.StoreArray2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->data(i).data(), static_cast<int>(this->data(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreArray2D.data");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->data(i), output);
  }

  // int32 row = 2;
  if (this->row() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->row(), output);
  }

  // int32 col = 3;
  if (this->col() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->col(), output);
  }

  // int32 fileflag = 4;
  if (this->fileflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->fileflag(), output);
  }

  // repeated string filenames = 5;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreArray2D.filenames");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->filenames(i), output);
  }

  // int32 is_backstage = 6;
  if (this->is_backstage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->is_backstage(), output);
  }

  // string client_mount_path = 7;
  if (this->client_mount_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_mount_path().data(), static_cast<int>(this->client_mount_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreArray2D.client_mount_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->client_mount_path(), output);
  }

  // string server_mount_path = 8;
  if (this->server_mount_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->server_mount_path().data(), static_cast<int>(this->server_mount_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreArray2D.server_mount_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->server_mount_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cma.music.pb.StoreArray2D)
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreArray2D::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cma.music.pb.StoreArray2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string data = 1;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->data(i).data(), static_cast<int>(this->data(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreArray2D.data");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->data(i), target);
  }

  // int32 row = 2;
  if (this->row() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->row(), target);
  }

  // int32 col = 3;
  if (this->col() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->col(), target);
  }

  // int32 fileflag = 4;
  if (this->fileflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->fileflag(), target);
  }

  // repeated string filenames = 5;
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->filenames(i).data(), static_cast<int>(this->filenames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreArray2D.filenames");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->filenames(i), target);
  }

  // int32 is_backstage = 6;
  if (this->is_backstage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->is_backstage(), target);
  }

  // string client_mount_path = 7;
  if (this->client_mount_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->client_mount_path().data(), static_cast<int>(this->client_mount_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreArray2D.client_mount_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->client_mount_path(), target);
  }

  // string server_mount_path = 8;
  if (this->server_mount_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->server_mount_path().data(), static_cast<int>(this->server_mount_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreArray2D.server_mount_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->server_mount_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cma.music.pb.StoreArray2D)
  return target;
}

size_t StoreArray2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cma.music.pb.StoreArray2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->data_size());
  for (int i = 0, n = this->data_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->data(i));
  }

  // repeated string filenames = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->filenames_size());
  for (int i = 0, n = this->filenames_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->filenames(i));
  }

  // string client_mount_path = 7;
  if (this->client_mount_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->client_mount_path());
  }

  // string server_mount_path = 8;
  if (this->server_mount_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->server_mount_path());
  }

  // int32 row = 2;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->row());
  }

  // int32 col = 3;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->col());
  }

  // int32 fileflag = 4;
  if (this->fileflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fileflag());
  }

  // int32 is_backstage = 6;
  if (this->is_backstage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->is_backstage());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreArray2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cma.music.pb.StoreArray2D)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreArray2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreArray2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cma.music.pb.StoreArray2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cma.music.pb.StoreArray2D)
    MergeFrom(*source);
  }
}

void StoreArray2D::MergeFrom(const StoreArray2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cma.music.pb.StoreArray2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  filenames_.MergeFrom(from.filenames_);
  if (from.client_mount_path().size() > 0) {

    client_mount_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_mount_path_);
  }
  if (from.server_mount_path().size() > 0) {

    server_mount_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_mount_path_);
  }
  if (from.row() != 0) {
    set_row(from.row());
  }
  if (from.col() != 0) {
    set_col(from.col());
  }
  if (from.fileflag() != 0) {
    set_fileflag(from.fileflag());
  }
  if (from.is_backstage() != 0) {
    set_is_backstage(from.is_backstage());
  }
}

void StoreArray2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cma.music.pb.StoreArray2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreArray2D::CopyFrom(const StoreArray2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cma.music.pb.StoreArray2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreArray2D::IsInitialized() const {
  return true;
}

void StoreArray2D::InternalSwap(StoreArray2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.InternalSwap(CastToBase(&other->data_));
  filenames_.InternalSwap(CastToBase(&other->filenames_));
  client_mount_path_.Swap(&other->client_mount_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_mount_path_.Swap(&other->server_mount_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(row_, other->row_);
  swap(col_, other->col_);
  swap(fileflag_, other->fileflag_);
  swap(is_backstage_, other->is_backstage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreArray2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetDataBlock::InitAsDefaultInstance() {
  ::cma::music::pb::_RetDataBlock_default_instance_._instance.get_mutable()->request_ = const_cast< ::cma::music::pb::RequestInfo*>(
      ::cma::music::pb::RequestInfo::internal_default_instance());
}
class RetDataBlock::_Internal {
 public:
  static const ::cma::music::pb::RequestInfo& request(const RetDataBlock* msg);
};

const ::cma::music::pb::RequestInfo&
RetDataBlock::_Internal::request(const RetDataBlock* msg) {
  return *msg->request_;
}
RetDataBlock::RetDataBlock()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cma.music.pb.RetDataBlock)
}
RetDataBlock::RetDataBlock(const RetDataBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dataname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.dataname().empty()) {
    dataname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dataname_);
  }
  bytearray_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.bytearray().empty()) {
    bytearray_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytearray_);
  }
  if (from.has_request()) {
    request_ = new ::cma::music::pb::RequestInfo(*from.request_);
  } else {
    request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cma.music.pb.RetDataBlock)
}

void RetDataBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetDataBlock_apiinterface_2eproto.base);
  dataname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytearray_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_ = nullptr;
}

RetDataBlock::~RetDataBlock() {
  // @@protoc_insertion_point(destructor:cma.music.pb.RetDataBlock)
  SharedDtor();
}

void RetDataBlock::SharedDtor() {
  dataname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytearray_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
}

void RetDataBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetDataBlock& RetDataBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetDataBlock_apiinterface_2eproto.base);
  return *internal_default_instance();
}


void RetDataBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:cma.music.pb.RetDataBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytearray_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetDataBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dataName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_dataname(), ptr, ctx, "cma.music.pb.RetDataBlock.dataName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes byteArray = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_bytearray(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .cma.music.pb.RequestInfo request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetDataBlock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cma.music.pb.RetDataBlock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dataName = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dataname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->dataname().data(), static_cast<int>(this->dataname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RetDataBlock.dataName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes byteArray = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytearray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cma.music.pb.RequestInfo request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cma.music.pb.RetDataBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cma.music.pb.RetDataBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetDataBlock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cma.music.pb.RetDataBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataName = 1;
  if (this->dataname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dataname().data(), static_cast<int>(this->dataname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetDataBlock.dataName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dataname(), output);
  }

  // bytes byteArray = 2;
  if (this->bytearray().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bytearray(), output);
  }

  // .cma.music.pb.RequestInfo request = 3;
  if (this->has_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::request(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cma.music.pb.RetDataBlock)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetDataBlock::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cma.music.pb.RetDataBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dataName = 1;
  if (this->dataname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->dataname().data(), static_cast<int>(this->dataname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetDataBlock.dataName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->dataname(), target);
  }

  // bytes byteArray = 2;
  if (this->bytearray().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->bytearray(), target);
  }

  // .cma.music.pb.RequestInfo request = 3;
  if (this->has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::request(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cma.music.pb.RetDataBlock)
  return target;
}

size_t RetDataBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cma.music.pb.RetDataBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dataName = 1;
  if (this->dataname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dataname());
  }

  // bytes byteArray = 2;
  if (this->bytearray().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->bytearray());
  }

  // .cma.music.pb.RequestInfo request = 3;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetDataBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cma.music.pb.RetDataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const RetDataBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetDataBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cma.music.pb.RetDataBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cma.music.pb.RetDataBlock)
    MergeFrom(*source);
  }
}

void RetDataBlock::MergeFrom(const RetDataBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cma.music.pb.RetDataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dataname().size() > 0) {

    dataname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dataname_);
  }
  if (from.bytearray().size() > 0) {

    bytearray_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytearray_);
  }
  if (from.has_request()) {
    mutable_request()->::cma::music::pb::RequestInfo::MergeFrom(from.request());
  }
}

void RetDataBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cma.music.pb.RetDataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetDataBlock::CopyFrom(const RetDataBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cma.music.pb.RetDataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetDataBlock::IsInitialized() const {
  return true;
}

void RetDataBlock::InternalSwap(RetDataBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dataname_.Swap(&other->dataname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bytearray_.Swap(&other->bytearray_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetDataBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetGridVector2D::InitAsDefaultInstance() {
  ::cma::music::pb::_RetGridVector2D_default_instance_._instance.get_mutable()->request_ = const_cast< ::cma::music::pb::RequestInfo*>(
      ::cma::music::pb::RequestInfo::internal_default_instance());
}
class RetGridVector2D::_Internal {
 public:
  static const ::cma::music::pb::RequestInfo& request(const RetGridVector2D* msg);
};

const ::cma::music::pb::RequestInfo&
RetGridVector2D::_Internal::request(const RetGridVector2D* msg) {
  return *msg->request_;
}
RetGridVector2D::RetGridVector2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cma.music.pb.RetGridVector2D)
}
RetGridVector2D::RetGridVector2D(const RetGridVector2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      u_datas_(from.u_datas_),
      v_data2_(from.v_data2_),
      lats_(from.lats_),
      lons_(from.lons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  u_elename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.u_elename().empty()) {
    u_elename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.u_elename_);
  }
  v_elename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.v_elename().empty()) {
    v_elename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.v_elename_);
  }
  if (from.has_request()) {
    request_ = new ::cma::music::pb::RequestInfo(*from.request_);
  } else {
    request_ = nullptr;
  }
  ::memcpy(&startlat_, &from.startlat_,
    static_cast<size_t>(reinterpret_cast<char*>(&latstep_) -
    reinterpret_cast<char*>(&startlat_)) + sizeof(latstep_));
  // @@protoc_insertion_point(copy_constructor:cma.music.pb.RetGridVector2D)
}

void RetGridVector2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetGridVector2D_apiinterface_2eproto.base);
  u_elename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_elename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latstep_) -
      reinterpret_cast<char*>(&request_)) + sizeof(latstep_));
}

RetGridVector2D::~RetGridVector2D() {
  // @@protoc_insertion_point(destructor:cma.music.pb.RetGridVector2D)
  SharedDtor();
}

void RetGridVector2D::SharedDtor() {
  u_elename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_elename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
}

void RetGridVector2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetGridVector2D& RetGridVector2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetGridVector2D_apiinterface_2eproto.base);
  return *internal_default_instance();
}


void RetGridVector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cma.music.pb.RetGridVector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  u_datas_.Clear();
  v_data2_.Clear();
  lats_.Clear();
  lons_.Clear();
  u_elename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  v_elename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  ::memset(&startlat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latstep_) -
      reinterpret_cast<char*>(&startlat_)) + sizeof(latstep_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetGridVector2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float u_datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_u_datas(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_u_datas(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float v_data2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_v_data2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_v_data2(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .cma.music.pb.RequestInfo request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float startLat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          startlat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float startLon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          startlon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float endLat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          endlat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float endLon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          endlon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 latCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          latcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lonCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          loncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lonStep = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          lonstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latStep = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          latstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float lats = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_lats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          add_lats(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float lons = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_lons(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109) {
          add_lons(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string u_EleName = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_u_elename(), ptr, ctx, "cma.music.pb.RetGridVector2D.u_EleName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string v_EleName = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_v_elename(), ptr, ctx, "cma.music.pb.RetGridVector2D.v_EleName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetGridVector2D::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cma.music.pb.RetGridVector2D)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float u_datas = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_u_datas())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_u_datas())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float v_data2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_v_data2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_v_data2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cma.music.pb.RequestInfo request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float startLat = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startlat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float startLon = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startlon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float endLat = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endlat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float endLon = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endlon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 latCount = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lonCount = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &loncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lonStep = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lonstep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latStep = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latstep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float lats = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lats())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_lats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float lons = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lons())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 106u, input, this->mutable_lons())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string u_EleName = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_u_elename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->u_elename().data(), static_cast<int>(this->u_elename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RetGridVector2D.u_EleName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string v_EleName = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_v_elename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->v_elename().data(), static_cast<int>(this->v_elename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RetGridVector2D.v_EleName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cma.music.pb.RetGridVector2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cma.music.pb.RetGridVector2D)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetGridVector2D::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cma.music.pb.RetGridVector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float u_datas = 1;
  if (this->u_datas_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_u_datas_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->u_datas().data(), this->u_datas_size(), output);
  }

  // repeated float v_data2 = 2;
  if (this->v_data2_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_v_data2_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->v_data2().data(), this->v_data2_size(), output);
  }

  // .cma.music.pb.RequestInfo request = 3;
  if (this->has_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::request(this), output);
  }

  // float startLat = 4;
  if (!(this->startlat() <= 0 && this->startlat() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->startlat(), output);
  }

  // float startLon = 5;
  if (!(this->startlon() <= 0 && this->startlon() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->startlon(), output);
  }

  // float endLat = 6;
  if (!(this->endlat() <= 0 && this->endlat() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->endlat(), output);
  }

  // float endLon = 7;
  if (!(this->endlon() <= 0 && this->endlon() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->endlon(), output);
  }

  // int32 latCount = 8;
  if (this->latcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->latcount(), output);
  }

  // int32 lonCount = 9;
  if (this->loncount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->loncount(), output);
  }

  // float lonStep = 10;
  if (!(this->lonstep() <= 0 && this->lonstep() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->lonstep(), output);
  }

  // float latStep = 11;
  if (!(this->latstep() <= 0 && this->latstep() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->latstep(), output);
  }

  // repeated float lats = 12;
  if (this->lats_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lats_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->lats().data(), this->lats_size(), output);
  }

  // repeated float lons = 13;
  if (this->lons_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(13, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lons_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->lons().data(), this->lons_size(), output);
  }

  // string u_EleName = 14;
  if (this->u_elename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->u_elename().data(), static_cast<int>(this->u_elename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridVector2D.u_EleName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->u_elename(), output);
  }

  // string v_EleName = 15;
  if (this->v_elename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->v_elename().data(), static_cast<int>(this->v_elename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridVector2D.v_EleName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->v_elename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cma.music.pb.RetGridVector2D)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetGridVector2D::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cma.music.pb.RetGridVector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float u_datas = 1;
  if (this->u_datas_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _u_datas_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->u_datas_, target);
  }

  // repeated float v_data2 = 2;
  if (this->v_data2_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _v_data2_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->v_data2_, target);
  }

  // .cma.music.pb.RequestInfo request = 3;
  if (this->has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::request(this), target);
  }

  // float startLat = 4;
  if (!(this->startlat() <= 0 && this->startlat() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->startlat(), target);
  }

  // float startLon = 5;
  if (!(this->startlon() <= 0 && this->startlon() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->startlon(), target);
  }

  // float endLat = 6;
  if (!(this->endlat() <= 0 && this->endlat() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->endlat(), target);
  }

  // float endLon = 7;
  if (!(this->endlon() <= 0 && this->endlon() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->endlon(), target);
  }

  // int32 latCount = 8;
  if (this->latcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->latcount(), target);
  }

  // int32 lonCount = 9;
  if (this->loncount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->loncount(), target);
  }

  // float lonStep = 10;
  if (!(this->lonstep() <= 0 && this->lonstep() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->lonstep(), target);
  }

  // float latStep = 11;
  if (!(this->latstep() <= 0 && this->latstep() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->latstep(), target);
  }

  // repeated float lats = 12;
  if (this->lats_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _lats_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->lats_, target);
  }

  // repeated float lons = 13;
  if (this->lons_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      13,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _lons_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->lons_, target);
  }

  // string u_EleName = 14;
  if (this->u_elename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->u_elename().data(), static_cast<int>(this->u_elename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridVector2D.u_EleName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->u_elename(), target);
  }

  // string v_EleName = 15;
  if (this->v_elename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->v_elename().data(), static_cast<int>(this->v_elename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridVector2D.v_EleName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        15, this->v_elename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cma.music.pb.RetGridVector2D)
  return target;
}

size_t RetGridVector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cma.music.pb.RetGridVector2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float u_datas = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->u_datas_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _u_datas_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float v_data2 = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->v_data2_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _v_data2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float lats = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->lats_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float lons = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->lons_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lons_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string u_EleName = 14;
  if (this->u_elename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->u_elename());
  }

  // string v_EleName = 15;
  if (this->v_elename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->v_elename());
  }

  // .cma.music.pb.RequestInfo request = 3;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // float startLat = 4;
  if (!(this->startlat() <= 0 && this->startlat() >= 0)) {
    total_size += 1 + 4;
  }

  // float startLon = 5;
  if (!(this->startlon() <= 0 && this->startlon() >= 0)) {
    total_size += 1 + 4;
  }

  // float endLat = 6;
  if (!(this->endlat() <= 0 && this->endlat() >= 0)) {
    total_size += 1 + 4;
  }

  // float endLon = 7;
  if (!(this->endlon() <= 0 && this->endlon() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 latCount = 8;
  if (this->latcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->latcount());
  }

  // int32 lonCount = 9;
  if (this->loncount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->loncount());
  }

  // float lonStep = 10;
  if (!(this->lonstep() <= 0 && this->lonstep() >= 0)) {
    total_size += 1 + 4;
  }

  // float latStep = 11;
  if (!(this->latstep() <= 0 && this->latstep() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetGridVector2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cma.music.pb.RetGridVector2D)
  GOOGLE_DCHECK_NE(&from, this);
  const RetGridVector2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetGridVector2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cma.music.pb.RetGridVector2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cma.music.pb.RetGridVector2D)
    MergeFrom(*source);
  }
}

void RetGridVector2D::MergeFrom(const RetGridVector2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cma.music.pb.RetGridVector2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  u_datas_.MergeFrom(from.u_datas_);
  v_data2_.MergeFrom(from.v_data2_);
  lats_.MergeFrom(from.lats_);
  lons_.MergeFrom(from.lons_);
  if (from.u_elename().size() > 0) {

    u_elename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.u_elename_);
  }
  if (from.v_elename().size() > 0) {

    v_elename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.v_elename_);
  }
  if (from.has_request()) {
    mutable_request()->::cma::music::pb::RequestInfo::MergeFrom(from.request());
  }
  if (!(from.startlat() <= 0 && from.startlat() >= 0)) {
    set_startlat(from.startlat());
  }
  if (!(from.startlon() <= 0 && from.startlon() >= 0)) {
    set_startlon(from.startlon());
  }
  if (!(from.endlat() <= 0 && from.endlat() >= 0)) {
    set_endlat(from.endlat());
  }
  if (!(from.endlon() <= 0 && from.endlon() >= 0)) {
    set_endlon(from.endlon());
  }
  if (from.latcount() != 0) {
    set_latcount(from.latcount());
  }
  if (from.loncount() != 0) {
    set_loncount(from.loncount());
  }
  if (!(from.lonstep() <= 0 && from.lonstep() >= 0)) {
    set_lonstep(from.lonstep());
  }
  if (!(from.latstep() <= 0 && from.latstep() >= 0)) {
    set_latstep(from.latstep());
  }
}

void RetGridVector2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cma.music.pb.RetGridVector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGridVector2D::CopyFrom(const RetGridVector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cma.music.pb.RetGridVector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGridVector2D::IsInitialized() const {
  return true;
}

void RetGridVector2D::InternalSwap(RetGridVector2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  u_datas_.InternalSwap(&other->u_datas_);
  v_data2_.InternalSwap(&other->v_data2_);
  lats_.InternalSwap(&other->lats_);
  lons_.InternalSwap(&other->lons_);
  u_elename_.Swap(&other->u_elename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  v_elename_.Swap(&other->v_elename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_, other->request_);
  swap(startlat_, other->startlat_);
  swap(startlon_, other->startlon_);
  swap(endlat_, other->endlat_);
  swap(endlon_, other->endlon_);
  swap(latcount_, other->latcount_);
  swap(loncount_, other->loncount_);
  swap(lonstep_, other->lonstep_);
  swap(latstep_, other->latstep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetGridVector2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetGridScalar2D::InitAsDefaultInstance() {
  ::cma::music::pb::_RetGridScalar2D_default_instance_._instance.get_mutable()->request_ = const_cast< ::cma::music::pb::RequestInfo*>(
      ::cma::music::pb::RequestInfo::internal_default_instance());
}
class RetGridScalar2D::_Internal {
 public:
  static const ::cma::music::pb::RequestInfo& request(const RetGridScalar2D* msg);
};

const ::cma::music::pb::RequestInfo&
RetGridScalar2D::_Internal::request(const RetGridScalar2D* msg) {
  return *msg->request_;
}
RetGridScalar2D::RetGridScalar2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cma.music.pb.RetGridScalar2D)
}
RetGridScalar2D::RetGridScalar2D(const RetGridScalar2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      datas_(from.datas_),
      lats_(from.lats_),
      lons_(from.lons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.units().empty()) {
    units_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  userelename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.userelename().empty()) {
    userelename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userelename_);
  }
  if (from.has_request()) {
    request_ = new ::cma::music::pb::RequestInfo(*from.request_);
  } else {
    request_ = nullptr;
  }
  ::memcpy(&startlat_, &from.startlat_,
    static_cast<size_t>(reinterpret_cast<char*>(&latstep_) -
    reinterpret_cast<char*>(&startlat_)) + sizeof(latstep_));
  // @@protoc_insertion_point(copy_constructor:cma.music.pb.RetGridScalar2D)
}

void RetGridScalar2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetGridScalar2D_apiinterface_2eproto.base);
  units_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userelename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latstep_) -
      reinterpret_cast<char*>(&request_)) + sizeof(latstep_));
}

RetGridScalar2D::~RetGridScalar2D() {
  // @@protoc_insertion_point(destructor:cma.music.pb.RetGridScalar2D)
  SharedDtor();
}

void RetGridScalar2D::SharedDtor() {
  units_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userelename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_;
}

void RetGridScalar2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetGridScalar2D& RetGridScalar2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetGridScalar2D_apiinterface_2eproto.base);
  return *internal_default_instance();
}


void RetGridScalar2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cma.music.pb.RetGridScalar2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  lats_.Clear();
  lons_.Clear();
  units_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userelename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  ::memset(&startlat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latstep_) -
      reinterpret_cast<char*>(&startlat_)) + sizeof(latstep_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetGridScalar2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_datas(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_datas(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .cma.music.pb.RequestInfo request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float startLat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          startlat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float startLon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          startlon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float endLat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          endlat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float endLon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          endlon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 latCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          latcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lonCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          loncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lonStep = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          lonstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latStep = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          latstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float lats = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_lats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          add_lats(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float lons = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_lons(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          add_lons(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string units = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_units(), ptr, ctx, "cma.music.pb.RetGridScalar2D.units");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userEleName = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_userelename(), ptr, ctx, "cma.music.pb.RetGridScalar2D.userEleName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetGridScalar2D::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cma.music.pb.RetGridScalar2D)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float datas = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_datas())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_datas())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cma.music.pb.RequestInfo request = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float startLat = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startlat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float startLon = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startlon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float endLat = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endlat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float endLon = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endlon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 latCount = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lonCount = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &loncount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lonStep = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lonstep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latStep = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latstep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float lats = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lats())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_lats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float lons = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lons())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_lons())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string units = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->units().data(), static_cast<int>(this->units().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RetGridScalar2D.units"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userEleName = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_userelename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->userelename().data(), static_cast<int>(this->userelename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.RetGridScalar2D.userEleName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cma.music.pb.RetGridScalar2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cma.music.pb.RetGridScalar2D)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetGridScalar2D::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cma.music.pb.RetGridScalar2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float datas = 1;
  if (this->datas_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_datas_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->datas().data(), this->datas_size(), output);
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::request(this), output);
  }

  // float startLat = 3;
  if (!(this->startlat() <= 0 && this->startlat() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->startlat(), output);
  }

  // float startLon = 4;
  if (!(this->startlon() <= 0 && this->startlon() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->startlon(), output);
  }

  // float endLat = 5;
  if (!(this->endlat() <= 0 && this->endlat() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->endlat(), output);
  }

  // float endLon = 6;
  if (!(this->endlon() <= 0 && this->endlon() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->endlon(), output);
  }

  // int32 latCount = 7;
  if (this->latcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->latcount(), output);
  }

  // int32 lonCount = 8;
  if (this->loncount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->loncount(), output);
  }

  // float lonStep = 9;
  if (!(this->lonstep() <= 0 && this->lonstep() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->lonstep(), output);
  }

  // float latStep = 10;
  if (!(this->latstep() <= 0 && this->latstep() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->latstep(), output);
  }

  // repeated float lats = 11;
  if (this->lats_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lats_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->lats().data(), this->lats_size(), output);
  }

  // repeated float lons = 12;
  if (this->lons_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lons_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->lons().data(), this->lons_size(), output);
  }

  // string units = 13;
  if (this->units().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->units().data(), static_cast<int>(this->units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridScalar2D.units");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->units(), output);
  }

  // string userEleName = 14;
  if (this->userelename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->userelename().data(), static_cast<int>(this->userelename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridScalar2D.userEleName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->userelename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cma.music.pb.RetGridScalar2D)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetGridScalar2D::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cma.music.pb.RetGridScalar2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float datas = 1;
  if (this->datas_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _datas_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->datas_, target);
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::request(this), target);
  }

  // float startLat = 3;
  if (!(this->startlat() <= 0 && this->startlat() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->startlat(), target);
  }

  // float startLon = 4;
  if (!(this->startlon() <= 0 && this->startlon() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->startlon(), target);
  }

  // float endLat = 5;
  if (!(this->endlat() <= 0 && this->endlat() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->endlat(), target);
  }

  // float endLon = 6;
  if (!(this->endlon() <= 0 && this->endlon() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->endlon(), target);
  }

  // int32 latCount = 7;
  if (this->latcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->latcount(), target);
  }

  // int32 lonCount = 8;
  if (this->loncount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->loncount(), target);
  }

  // float lonStep = 9;
  if (!(this->lonstep() <= 0 && this->lonstep() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->lonstep(), target);
  }

  // float latStep = 10;
  if (!(this->latstep() <= 0 && this->latstep() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->latstep(), target);
  }

  // repeated float lats = 11;
  if (this->lats_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      11,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _lats_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->lats_, target);
  }

  // repeated float lons = 12;
  if (this->lons_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _lons_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->lons_, target);
  }

  // string units = 13;
  if (this->units().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->units().data(), static_cast<int>(this->units().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridScalar2D.units");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->units(), target);
  }

  // string userEleName = 14;
  if (this->userelename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->userelename().data(), static_cast<int>(this->userelename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.RetGridScalar2D.userEleName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->userelename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cma.music.pb.RetGridScalar2D)
  return target;
}

size_t RetGridScalar2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cma.music.pb.RetGridScalar2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float datas = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->datas_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _datas_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float lats = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->lats_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float lons = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->lons_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lons_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string units = 13;
  if (this->units().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->units());
  }

  // string userEleName = 14;
  if (this->userelename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->userelename());
  }

  // .cma.music.pb.RequestInfo request = 2;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // float startLat = 3;
  if (!(this->startlat() <= 0 && this->startlat() >= 0)) {
    total_size += 1 + 4;
  }

  // float startLon = 4;
  if (!(this->startlon() <= 0 && this->startlon() >= 0)) {
    total_size += 1 + 4;
  }

  // float endLat = 5;
  if (!(this->endlat() <= 0 && this->endlat() >= 0)) {
    total_size += 1 + 4;
  }

  // float endLon = 6;
  if (!(this->endlon() <= 0 && this->endlon() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 latCount = 7;
  if (this->latcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->latcount());
  }

  // int32 lonCount = 8;
  if (this->loncount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->loncount());
  }

  // float lonStep = 9;
  if (!(this->lonstep() <= 0 && this->lonstep() >= 0)) {
    total_size += 1 + 4;
  }

  // float latStep = 10;
  if (!(this->latstep() <= 0 && this->latstep() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetGridScalar2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cma.music.pb.RetGridScalar2D)
  GOOGLE_DCHECK_NE(&from, this);
  const RetGridScalar2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetGridScalar2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cma.music.pb.RetGridScalar2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cma.music.pb.RetGridScalar2D)
    MergeFrom(*source);
  }
}

void RetGridScalar2D::MergeFrom(const RetGridScalar2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cma.music.pb.RetGridScalar2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
  lats_.MergeFrom(from.lats_);
  lons_.MergeFrom(from.lons_);
  if (from.units().size() > 0) {

    units_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.units_);
  }
  if (from.userelename().size() > 0) {

    userelename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.userelename_);
  }
  if (from.has_request()) {
    mutable_request()->::cma::music::pb::RequestInfo::MergeFrom(from.request());
  }
  if (!(from.startlat() <= 0 && from.startlat() >= 0)) {
    set_startlat(from.startlat());
  }
  if (!(from.startlon() <= 0 && from.startlon() >= 0)) {
    set_startlon(from.startlon());
  }
  if (!(from.endlat() <= 0 && from.endlat() >= 0)) {
    set_endlat(from.endlat());
  }
  if (!(from.endlon() <= 0 && from.endlon() >= 0)) {
    set_endlon(from.endlon());
  }
  if (from.latcount() != 0) {
    set_latcount(from.latcount());
  }
  if (from.loncount() != 0) {
    set_loncount(from.loncount());
  }
  if (!(from.lonstep() <= 0 && from.lonstep() >= 0)) {
    set_lonstep(from.lonstep());
  }
  if (!(from.latstep() <= 0 && from.latstep() >= 0)) {
    set_latstep(from.latstep());
  }
}

void RetGridScalar2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cma.music.pb.RetGridScalar2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGridScalar2D::CopyFrom(const RetGridScalar2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cma.music.pb.RetGridScalar2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGridScalar2D::IsInitialized() const {
  return true;
}

void RetGridScalar2D::InternalSwap(RetGridScalar2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datas_.InternalSwap(&other->datas_);
  lats_.InternalSwap(&other->lats_);
  lons_.InternalSwap(&other->lons_);
  units_.Swap(&other->units_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  userelename_.Swap(&other->userelename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_, other->request_);
  swap(startlat_, other->startlat_);
  swap(startlon_, other->startlon_);
  swap(endlat_, other->endlat_);
  swap(endlon_, other->endlon_);
  swap(latcount_, other->latcount_);
  swap(loncount_, other->loncount_);
  swap(lonstep_, other->lonstep_);
  swap(latstep_, other->latstep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetGridScalar2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreGridData::InitAsDefaultInstance() {
}
class StoreGridData::_Internal {
 public:
};

StoreGridData::StoreGridData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cma.music.pb.StoreGridData)
}
StoreGridData::StoreGridData(const StoreGridData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attributes_(from.attributes_),
      lats_(from.lats_),
      lons_(from.lons_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pointflag_ = from.pointflag_;
  // @@protoc_insertion_point(copy_constructor:cma.music.pb.StoreGridData)
}

void StoreGridData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreGridData_apiinterface_2eproto.base);
  pointflag_ = 0;
}

StoreGridData::~StoreGridData() {
  // @@protoc_insertion_point(destructor:cma.music.pb.StoreGridData)
  SharedDtor();
}

void StoreGridData::SharedDtor() {
}

void StoreGridData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreGridData& StoreGridData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreGridData_apiinterface_2eproto.base);
  return *internal_default_instance();
}


void StoreGridData::Clear() {
// @@protoc_insertion_point(message_clear_start:cma.music.pb.StoreGridData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  lats_.Clear();
  lons_.Clear();
  datas_.Clear();
  pointflag_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreGridData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_attributes(), ptr, ctx, "cma.music.pb.StoreGridData.attributes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // int32 pointflag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pointflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float Lats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_lats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_lats(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float Lons = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_lons(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_lons(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float datas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_datas(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          add_datas(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreGridData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cma.music.pb.StoreGridData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string attributes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_attributes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->attributes(this->attributes_size() - 1).data(),
            static_cast<int>(this->attributes(this->attributes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.StoreGridData.attributes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pointflag = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Lats = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lats())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_lats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float Lons = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_lons())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_lons())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float datas = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_datas())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_datas())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cma.music.pb.StoreGridData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cma.music.pb.StoreGridData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreGridData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cma.music.pb.StoreGridData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string attributes = 1;
  for (int i = 0, n = this->attributes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->attributes(i).data(), static_cast<int>(this->attributes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreGridData.attributes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->attributes(i), output);
  }

  // int32 pointflag = 2;
  if (this->pointflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->pointflag(), output);
  }

  // repeated float Lats = 3;
  if (this->lats_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lats_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->lats().data(), this->lats_size(), output);
  }

  // repeated float Lons = 4;
  if (this->lons_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_lons_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->lons().data(), this->lons_size(), output);
  }

  // repeated float datas = 5;
  if (this->datas_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_datas_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->datas().data(), this->datas_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cma.music.pb.StoreGridData)
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreGridData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cma.music.pb.StoreGridData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string attributes = 1;
  for (int i = 0, n = this->attributes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->attributes(i).data(), static_cast<int>(this->attributes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreGridData.attributes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->attributes(i), target);
  }

  // int32 pointflag = 2;
  if (this->pointflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->pointflag(), target);
  }

  // repeated float Lats = 3;
  if (this->lats_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _lats_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->lats_, target);
  }

  // repeated float Lons = 4;
  if (this->lons_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _lons_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->lons_, target);
  }

  // repeated float datas = 5;
  if (this->datas_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _datas_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->datas_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cma.music.pb.StoreGridData)
  return target;
}

size_t StoreGridData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cma.music.pb.StoreGridData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attributes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->attributes_size());
  for (int i = 0, n = this->attributes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->attributes(i));
  }

  // repeated float Lats = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lats_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float Lons = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->lons_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _lons_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float datas = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->datas_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _datas_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 pointflag = 2;
  if (this->pointflag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pointflag());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreGridData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cma.music.pb.StoreGridData)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreGridData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreGridData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cma.music.pb.StoreGridData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cma.music.pb.StoreGridData)
    MergeFrom(*source);
  }
}

void StoreGridData::MergeFrom(const StoreGridData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cma.music.pb.StoreGridData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  lats_.MergeFrom(from.lats_);
  lons_.MergeFrom(from.lons_);
  datas_.MergeFrom(from.datas_);
  if (from.pointflag() != 0) {
    set_pointflag(from.pointflag());
  }
}

void StoreGridData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cma.music.pb.StoreGridData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreGridData::CopyFrom(const StoreGridData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cma.music.pb.StoreGridData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreGridData::IsInitialized() const {
  return true;
}

void StoreGridData::InternalSwap(StoreGridData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.InternalSwap(CastToBase(&other->attributes_));
  lats_.InternalSwap(&other->lats_);
  lons_.InternalSwap(&other->lons_);
  datas_.InternalSwap(&other->datas_);
  swap(pointflag_, other->pointflag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreGridData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreBlockData::InitAsDefaultInstance() {
}
class StoreBlockData::_Internal {
 public:
};

StoreBlockData::StoreBlockData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cma.music.pb.StoreBlockData)
}
StoreBlockData::StoreBlockData(const StoreBlockData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:cma.music.pb.StoreBlockData)
}

void StoreBlockData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreBlockData_apiinterface_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StoreBlockData::~StoreBlockData() {
  // @@protoc_insertion_point(destructor:cma.music.pb.StoreBlockData)
  SharedDtor();
}

void StoreBlockData::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StoreBlockData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreBlockData& StoreBlockData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreBlockData_apiinterface_2eproto.base);
  return *internal_default_instance();
}


void StoreBlockData::Clear() {
// @@protoc_insertion_point(message_clear_start:cma.music.pb.StoreBlockData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreBlockData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_attributes(), ptr, ctx, "cma.music.pb.StoreBlockData.attributes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreBlockData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:cma.music.pb.StoreBlockData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string attributes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_attributes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->attributes(this->attributes_size() - 1).data(),
            static_cast<int>(this->attributes(this->attributes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "cma.music.pb.StoreBlockData.attributes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cma.music.pb.StoreBlockData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cma.music.pb.StoreBlockData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreBlockData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cma.music.pb.StoreBlockData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string attributes = 1;
  for (int i = 0, n = this->attributes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->attributes(i).data(), static_cast<int>(this->attributes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreBlockData.attributes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->attributes(i), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cma.music.pb.StoreBlockData)
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreBlockData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cma.music.pb.StoreBlockData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string attributes = 1;
  for (int i = 0, n = this->attributes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->attributes(i).data(), static_cast<int>(this->attributes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "cma.music.pb.StoreBlockData.attributes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->attributes(i), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cma.music.pb.StoreBlockData)
  return target;
}

size_t StoreBlockData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cma.music.pb.StoreBlockData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attributes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->attributes_size());
  for (int i = 0, n = this->attributes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->attributes(i));
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreBlockData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cma.music.pb.StoreBlockData)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreBlockData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreBlockData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cma.music.pb.StoreBlockData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cma.music.pb.StoreBlockData)
    MergeFrom(*source);
  }
}

void StoreBlockData::MergeFrom(const StoreBlockData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cma.music.pb.StoreBlockData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void StoreBlockData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cma.music.pb.StoreBlockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreBlockData::CopyFrom(const StoreBlockData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cma.music.pb.StoreBlockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreBlockData::IsInitialized() const {
  return true;
}

void StoreBlockData::InternalSwap(StoreBlockData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.InternalSwap(CastToBase(&other->attributes_));
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreBlockData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace music
}  // namespace cma
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cma::music::pb::RequestInfo* Arena::CreateMaybeMessage< ::cma::music::pb::RequestInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cma::music::pb::RequestInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cma::music::pb::RetArray2D* Arena::CreateMaybeMessage< ::cma::music::pb::RetArray2D >(Arena* arena) {
  return Arena::CreateInternal< ::cma::music::pb::RetArray2D >(arena);
}
template<> PROTOBUF_NOINLINE ::cma::music::pb::RetGridArray2D* Arena::CreateMaybeMessage< ::cma::music::pb::RetGridArray2D >(Arena* arena) {
  return Arena::CreateInternal< ::cma::music::pb::RetGridArray2D >(arena);
}
template<> PROTOBUF_NOINLINE ::cma::music::pb::FileInfo* Arena::CreateMaybeMessage< ::cma::music::pb::FileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cma::music::pb::FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cma::music::pb::RetFilesInfo* Arena::CreateMaybeMessage< ::cma::music::pb::RetFilesInfo >(Arena* arena) {
  return Arena::CreateInternal< ::cma::music::pb::RetFilesInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cma::music::pb::StoreArray2D* Arena::CreateMaybeMessage< ::cma::music::pb::StoreArray2D >(Arena* arena) {
  return Arena::CreateInternal< ::cma::music::pb::StoreArray2D >(arena);
}
template<> PROTOBUF_NOINLINE ::cma::music::pb::RetDataBlock* Arena::CreateMaybeMessage< ::cma::music::pb::RetDataBlock >(Arena* arena) {
  return Arena::CreateInternal< ::cma::music::pb::RetDataBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::cma::music::pb::RetGridVector2D* Arena::CreateMaybeMessage< ::cma::music::pb::RetGridVector2D >(Arena* arena) {
  return Arena::CreateInternal< ::cma::music::pb::RetGridVector2D >(arena);
}
template<> PROTOBUF_NOINLINE ::cma::music::pb::RetGridScalar2D* Arena::CreateMaybeMessage< ::cma::music::pb::RetGridScalar2D >(Arena* arena) {
  return Arena::CreateInternal< ::cma::music::pb::RetGridScalar2D >(arena);
}
template<> PROTOBUF_NOINLINE ::cma::music::pb::StoreGridData* Arena::CreateMaybeMessage< ::cma::music::pb::StoreGridData >(Arena* arena) {
  return Arena::CreateInternal< ::cma::music::pb::StoreGridData >(arena);
}
template<> PROTOBUF_NOINLINE ::cma::music::pb::StoreBlockData* Arena::CreateMaybeMessage< ::cma::music::pb::StoreBlockData >(Arena* arena) {
  return Arena::CreateInternal< ::cma::music::pb::StoreBlockData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
